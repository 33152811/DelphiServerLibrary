unit DSLWinsock2;

interface

uses
  Windows, Qos;

type
  TSocketId = Cardinal;

const
  FD_SETSIZE = 64; {$EXTERNALSYM FD_SETSIZE}

type
  TFdSet = record
    fd_count: UInt32;
    fd_array: array [0 .. FD_SETSIZE - 1] of TSocketId;
    function isset(fd: TSocketId): Boolean;
    procedure clear(fd: TSocketId);
    procedure _set(fd: TSocketId);
    procedure zero; inline;
  end;

  PFdSet = ^TFdSet;

function WS2_FDIsSet(s: TSocketId; var FDSet: TFDSet): Integer; stdcall;

type
  TTimeVal = record
    tv_sec: Longint;
    tv_usec: Longint;
    function isset: Boolean;
    procedure clear;
  end;

  PTimeVal = ^TTimeVal;

const
  IOCPARM_MASK = $7F; {$EXTERNALSYM IOCPARM_MASK} {$EXTERNALSYM IOCPARM_MASK}
  IOC_VOID = $20000000; {$EXTERNALSYM IOC_VOID} {$EXTERNALSYM IOC_VOID}
  IOC_OUT = $40000000; {$EXTERNALSYM IOC_OUT} {$EXTERNALSYM IOC_OUT}
  IOC_IN = DWORD($80000000); {$EXTERNALSYM IOC_IN}
  IOC_INOUT = DWORD(IOC_IN or IOC_OUT); {$EXTERNALSYM IOC_INOUT}
function _IO(x, y: DWORD): DWORD;  {$EXTERNALSYM _IO}
function _IOR(x, y, t: DWORD): DWORD;  {$EXTERNALSYM _IOR}
function _IOW(x, y, t: DWORD): DWORD;  {$EXTERNALSYM _IOW}

const
  FIONREAD = IOC_OUT or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('f') shl 8) or 127; {$EXTERNALSYM FIONREAD}
  FIONBIO = IOC_IN or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('f') shl 8) or 126; {$EXTERNALSYM FIONBIO}
  FIOASYNC = IOC_IN or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('f') shl 8) or 125; {$EXTERNALSYM FIOASYNC}
  SIOCSHIWAT = DWORD(IOC_IN or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('s') shl 8) or 0);
{$EXTERNALSYM SIOCSHIWAT}
  SIOCGHIWAT = IOC_OUT or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('s') shl 8) or 1; {$EXTERNALSYM SIOCGHIWAT}
  SIOCSLOWAT = DWORD(IOC_IN or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('s') shl 8) or 2);
{$EXTERNALSYM SIOCSLOWAT}
  SIOCGLOWAT = IOC_OUT or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('s') shl 8) or 3; {$EXTERNALSYM SIOCGLOWAT}
  SIOCATMARK = IOC_OUT or ((SizeOf(UInt32) and IOCPARM_MASK) shl 16) or (Ord('s') shl 8) or 7; {$EXTERNALSYM SIOCATMARK}

type
{$EXTERNALSYM hostent}
  hostent = record
    h_name: PAnsiChar;
    h_aliases: PPAnsiChar;
    h_addrtype: Smallint;
    h_length: Smallint;
    case Integer of
      0:
        (h_addr_list: PPAnsiChar);
      1:
        (h_addr: PPAnsiChar);
  end;

  THostEnt = hostent;
  PHostEnt = ^hostent;

type
{$EXTERNALSYM netent}
  netent = record
    n_name: PAnsiChar;
    n_aliases: PPAnsiChar;
    n_addrtype: Smallint;
    n_net: UInt32;
  end;

  TNetEnt = netent;
  PNetEnt = ^netent;
{$EXTERNALSYM servent}

  servent = record
    s_name: PAnsiChar;
    s_aliases: PPAnsiChar;
    s_port: Smallint;
    s_proto: PAnsiChar;
  end;

  TServEnt = servent;
  PServEnt = ^servent;
{$EXTERNALSYM protoent}

  protoent = record
    p_name: PAnsiChar;
    p_aliases: PPAnsiChar;
    p_proto: Smallint;
  end;

  TProtoEnt = protoent;
  PProtoEnt = ^protoent;

const
  IPPROTO_IP = 0; {$EXTERNALSYM IPPROTO_IP}
  IPPROTO_HOPOPTS = 0; {$EXTERNALSYM IPPROTO_HOPOPTS}
  IPPROTO_ICMP = 1; {$EXTERNALSYM IPPROTO_ICMP}
  IPPROTO_IGMP = 2; {$EXTERNALSYM IPPROTO_IGMP}
  IPPROTO_GGP = 3; {$EXTERNALSYM IPPROTO_GGP}
  IPPROTO_IPV4 = 4; {$EXTERNALSYM IPPROTO_IPV4}
  IPPROTO_TCP = 6; {$EXTERNALSYM IPPROTO_TCP}
  IPPROTO_PUP = 12; {$EXTERNALSYM IPPROTO_PUP}
  IPPROTO_UDP = 17; {$EXTERNALSYM IPPROTO_UDP}
  IPPROTO_IDP = 22; {$EXTERNALSYM IPPROTO_IDP}
  IPPROTO_IPV6 = 41; {$EXTERNALSYM IPPROTO_IPV6}
  IPPROTO_ROUTING = 43; {$EXTERNALSYM IPPROTO_ROUTING}
  IPPROTO_FRAGMENT = 44; {$EXTERNALSYM IPPROTO_FRAGMENT}
  IPPROTO_ESP = 50; {$EXTERNALSYM IPPROTO_ESP}
  IPPROTO_AH = 51; {$EXTERNALSYM IPPROTO_AH}
  IPPROTO_ICMPV6 = 58; {$EXTERNALSYM IPPROTO_ICMPV6}
  IPPROTO_NONE = 59; {$EXTERNALSYM IPPROTO_NONE}
  IPPROTO_DSTOPTS = 60; {$EXTERNALSYM IPPROTO_DSTOPTS}
  IPPROTO_ND = 77; {$EXTERNALSYM IPPROTO_ND}
  IPPROTO_ICLFXBM = 78; {$EXTERNALSYM IPPROTO_ICLFXBM}
  IPPROTO_RAW = 255; {$EXTERNALSYM IPPROTO_RAW}
  IPPROTO_MAX = 256; {$EXTERNALSYM IPPROTO_MAX}
  IPPORT_ECHO = 7; {$EXTERNALSYM IPPORT_ECHO}
  IPPORT_DISCARD = 9; {$EXTERNALSYM IPPORT_DISCARD}
  IPPORT_SYSTAT = 11; {$EXTERNALSYM IPPORT_SYSTAT}
  IPPORT_DAYTIME = 13; {$EXTERNALSYM IPPORT_DAYTIME}
  IPPORT_NETSTAT = 15; {$EXTERNALSYM IPPORT_NETSTAT}
  IPPORT_FTP = 21; {$EXTERNALSYM IPPORT_FTP}
  IPPORT_TELNET = 23; {$EXTERNALSYM IPPORT_TELNET}
  IPPORT_SMTP = 25; {$EXTERNALSYM IPPORT_SMTP}
  IPPORT_TIMESERVER = 37; {$EXTERNALSYM IPPORT_TIMESERVER}
  IPPORT_NAMESERVER = 42; {$EXTERNALSYM IPPORT_NAMESERVER}
  IPPORT_WHOIS = 43; {$EXTERNALSYM IPPORT_WHOIS}
  IPPORT_MTP = 57; {$EXTERNALSYM IPPORT_MTP}
  IPPORT_TFTP = 69; {$EXTERNALSYM IPPORT_TFTP}
  IPPORT_RJE = 77; {$EXTERNALSYM IPPORT_RJE}
  IPPORT_FINGER = 79; {$EXTERNALSYM IPPORT_FINGER}
  IPPORT_TTYLINK = 87; {$EXTERNALSYM IPPORT_TTYLINK}
  IPPORT_SUPDUP = 95; {$EXTERNALSYM IPPORT_SUPDUP}
  IPPORT_EXECSERVER = 512; {$EXTERNALSYM IPPORT_EXECSERVER}
  IPPORT_LOGINSERVER = 513; {$EXTERNALSYM IPPORT_LOGINSERVER}
  IPPORT_CMDSERVER = 514; {$EXTERNALSYM IPPORT_CMDSERVER}
  IPPORT_EFSSERVER = 520; {$EXTERNALSYM IPPORT_EFSSERVER}
  IPPORT_BIFFUDP = 512; {$EXTERNALSYM IPPORT_BIFFUDP}
  IPPORT_WHOSERVER = 513; {$EXTERNALSYM IPPORT_WHOSERVER}
  IPPORT_ROUTESERVER = 520; {$EXTERNALSYM IPPORT_ROUTESERVER}
  IPPORT_RESERVED = 1024; {$EXTERNALSYM IPPORT_RESERVED}
  IMPLINK_IP = 155; {$EXTERNALSYM IMPLINK_IP}
  IMPLINK_LOWEXPER = 156; {$EXTERNALSYM IMPLINK_LOWEXPER}
  IMPLINK_HIGHEXPER = 158; {$EXTERNALSYM IMPLINK_HIGHEXPER}

type
  SunB = packed record
    s_b1, s_b2, s_b3, s_b4: Byte;
  end;

  SunC = packed record
    s_c1, s_c2, s_c3, s_c4: AnsiChar;
  end;

  SunW = packed record
    s_w1, s_w2: Word;
  end;

  in_addr = record
    case Integer of
      0:
        (S_un_b: SunB);
      1:
        (S_un_c: SunC);
      2:
        (S_un_w: SunW);
      3:
        (S_addr: UInt32);
  end;

  TInAddr = in_addr;
  PInAddr = ^in_addr;

function IN_CLASSA(i: DWORD): Boolean; {$EXTERNALSYM IN_CLASSA}

const
  IN_CLASSA_NET = DWORD($FF000000); {$EXTERNALSYM IN_CLASSA_NET}
  IN_CLASSA_NSHIFT = 24; {$EXTERNALSYM IN_CLASSA_NSHIFT}
  IN_CLASSA_HOST = $00FFFFFF; {$EXTERNALSYM IN_CLASSA_HOST}
  IN_CLASSA_MAX = 128; {$EXTERNALSYM IN_CLASSA_MAX}
function IN_CLASSB(i: DWORD): Boolean; {$EXTERNALSYM IN_CLASSB}

const
  IN_CLASSB_NET = DWORD($FFFF0000); {$EXTERNALSYM IN_CLASSB_NET}
  IN_CLASSB_NSHIFT = 16; {$EXTERNALSYM IN_CLASSB_NSHIFT}
  IN_CLASSB_HOST = $0000FFFF; {$EXTERNALSYM IN_CLASSB_HOST}
  IN_CLASSB_MAX = 65536; {$EXTERNALSYM IN_CLASSB_MAX}
function IN_CLASSC(i: DWORD): Boolean; {$EXTERNALSYM IN_CLASSC}

const
  IN_CLASSC_NET = DWORD($FFFFFF00); {$EXTERNALSYM IN_CLASSC_NET}
  IN_CLASSC_NSHIFT = 8; {$EXTERNALSYM IN_CLASSC_NSHIFT}
  IN_CLASSC_HOST = $000000FF; {$EXTERNALSYM IN_CLASSC_HOST}
function IN_CLASSD(i: DWORD): Boolean;   {$EXTERNALSYM IN_CLASSD}

const
  IN_CLASSD_NET = DWORD($F0000000); {$EXTERNALSYM IN_CLASSD_NET}
  IN_CLASSD_NSHIFT = 28; {$EXTERNALSYM IN_CLASSD_NSHIFT}
  IN_CLASSD_HOST = $0FFFFFFF; {$EXTERNALSYM IN_CLASSD_HOST}
function IN_MULTICAST(i: DWORD): Boolean;  {$EXTERNALSYM IN_MULTICAST}

const
  INADDR_ANY = UInt32($00000000); {$EXTERNALSYM INADDR_ANY}
  INADDR_LOOPBACK = $7F000001; {$EXTERNALSYM INADDR_LOOPBACK}
  INADDR_BROADCAST = UInt32($FFFFFFFF); {$EXTERNALSYM INADDR_BROADCAST}
  INADDR_NONE = DWORD($FFFFFFFF); {$EXTERNALSYM INADDR_NONE}
  ADDR_ANY = INADDR_ANY; {$EXTERNALSYM ADDR_ANY}

type
  sockaddr_in = record
    sin_family: Smallint;
    sin_port: Word;
    sin_addr: in_addr;
    sin_zero: array [0 .. 7] of AnsiChar;
  end;

  TSockAddrIn = sockaddr_in;
  PSockAddrIn = ^sockaddr_in;

const
  WSADESCRIPTION_LEN = 256; {$EXTERNALSYM WSADESCRIPTION_LEN}
  WSASYS_STATUS_LEN = 128; {$EXTERNALSYM WSASYS_STATUS_LEN}

type
  WSAData = record
    wVersion: WORD;
    wHighVersion: WORD;
    szDescription: array [0 .. WSADESCRIPTION_LEN] of AnsiChar;
    szSystemStatus: array [0 .. WSASYS_STATUS_LEN] of AnsiChar;
    iMaxSockets: Word;
    iMaxUdpDg: Word;
    lpVendorInfo: PAnsiChar;
  end;

  LPWSADATA = ^WSAData;

  TWsaData = WSAData;
  PWsaData = LPWSADATA;

  //


  //

  //


  //

const
  INVALID_SOCKET = TSocketId(not 0); {$EXTERNALSYM INVALID_SOCKET}
  SOCKET_ERROR = -1; {$EXTERNALSYM SOCKET_ERROR}


  //




  //

  FROM_PROTOCOL_INFO = -1; {$EXTERNALSYM FROM_PROTOCOL_INFO}


  //

  //

  SOCK_STREAM = 1; {$EXTERNALSYM SOCK_STREAM}
  SOCK_DGRAM = 2; {$EXTERNALSYM SOCK_DGRAM}
  SOCK_RAW = 3; {$EXTERNALSYM SOCK_RAW}
  SOCK_RDM = 4; {$EXTERNALSYM SOCK_RDM}
  SOCK_SEQPACKET = 5; {$EXTERNALSYM SOCK_SEQPACKET}


  //

  //

  SO_DEBUG = $0001; {$EXTERNALSYM SO_DEBUG}
  SO_ACCEPTCONN = $0002; {$EXTERNALSYM SO_ACCEPTCONN}
  SO_REUSEADDR = $0004; {$EXTERNALSYM SO_REUSEADDR}
  SO_KEEPALIVE = $0008; {$EXTERNALSYM SO_KEEPALIVE}
  SO_DONTROUTE = $0010; {$EXTERNALSYM SO_DONTROUTE}
  SO_BROADCAST = $0020; {$EXTERNALSYM SO_BROADCAST}
  SO_USELOOPBACK = $0040; {$EXTERNALSYM SO_USELOOPBACK}
  SO_LINGER = $0080; {$EXTERNALSYM SO_LINGER}
  SO_OOBINLINE = $0100; {$EXTERNALSYM SO_OOBINLINE}
  SO_DONTLINGER = DWORD(not SO_LINGER); {$EXTERNALSYM SO_DONTLINGER}
  SO_EXCLUSIVEADDRUSE = DWORD(not SO_REUSEADDR); {$EXTERNALSYM SO_EXCLUSIVEADDRUSE}


  //

  //

  SO_SNDBUF = $1001; {$EXTERNALSYM SO_SNDBUF}
  SO_RCVBUF = $1002; {$EXTERNALSYM SO_RCVBUF}
  SO_SNDLOWAT = $1003; {$EXTERNALSYM SO_SNDLOWAT}
  SO_RCVLOWAT = $1004; {$EXTERNALSYM SO_RCVLOWAT}
  SO_SNDTIMEO = $1005; {$EXTERNALSYM SO_SNDTIMEO}
  SO_RCVTIMEO = $1006; {$EXTERNALSYM SO_RCVTIMEO}
  SO_ERROR = $1007; {$EXTERNALSYM SO_ERROR}
  SO_TYPE = $1008; {$EXTERNALSYM SO_TYPE}


  //

  //

  SO_GROUP_ID = $2001; {$EXTERNALSYM SO_GROUP_ID}
  SO_GROUP_PRIORITY = $2002; {$EXTERNALSYM SO_GROUP_PRIORITY}
  SO_MAX_MSG_SIZE = $2003; {$EXTERNALSYM SO_MAX_MSG_SIZE}
  SO_PROTOCOL_INFOA = $2004; {$EXTERNALSYM SO_PROTOCOL_INFOA}
  SO_PROTOCOL_INFOW = $2005; {$EXTERNALSYM SO_PROTOCOL_INFOW}
{$EXTERNALSYM SO_PROTOCOL_INFO}
{$IFDEF UNICODE}
  SO_PROTOCOL_INFO = SO_PROTOCOL_INFOW;
{$ELSE}
  SO_PROTOCOL_INFO = SO_PROTOCOL_INFOA;
{$ENDIF UNICODE}
  PVD_CONFIG = $3001; {$EXTERNALSYM PVD_CONFIG}
  SO_CONDITIONAL_ACCEPT = $3002; {$EXTERNALSYM SO_CONDITIONAL_ACCEPT}





  //

  //

  TCP_NODELAY = $0001; {$EXTERNALSYM TCP_NODELAY}


  //

  //

  AF_UNSPEC = 0; {$EXTERNALSYM AF_UNSPEC}


  //







  //

  AF_UNIX = 1; {$EXTERNALSYM AF_UNIX}
  AF_INET = 2; {$EXTERNALSYM AF_INET}
  AF_IMPLINK = 3; {$EXTERNALSYM AF_IMPLINK}
  AF_PUP = 4; {$EXTERNALSYM AF_PUP}
  AF_CHAOS = 5; {$EXTERNALSYM AF_CHAOS}
  AF_NS = 6; {$EXTERNALSYM AF_NS}
  AF_IPX = AF_NS; {$EXTERNALSYM AF_IPX}
  AF_ISO = 7; {$EXTERNALSYM AF_ISO}
  AF_OSI = AF_ISO; {$EXTERNALSYM AF_OSI}
  AF_ECMA = 8; {$EXTERNALSYM AF_ECMA}
  AF_DATAKIT = 9; {$EXTERNALSYM AF_DATAKIT}
  AF_CCITT = 10; {$EXTERNALSYM AF_CCITT}
  AF_SNA = 11; {$EXTERNALSYM AF_SNA}
  AF_DECnet = 12; {$EXTERNALSYM AF_DECnet}
  AF_DLI = 13; {$EXTERNALSYM AF_DLI}
  AF_LAT = 14; {$EXTERNALSYM AF_LAT}
  AF_HYLINK = 15; {$EXTERNALSYM AF_HYLINK}
  AF_APPLETALK = 16; {$EXTERNALSYM AF_APPLETALK}
  AF_NETBIOS = 17; {$EXTERNALSYM AF_NETBIOS}
  AF_VOICEVIEW = 18; {$EXTERNALSYM AF_VOICEVIEW}
  AF_FIREFOX = 19; {$EXTERNALSYM AF_FIREFOX}
  AF_UNKNOWN1 = 20; {$EXTERNALSYM AF_UNKNOWN1}
  AF_BAN = 21; {$EXTERNALSYM AF_BAN}
  AF_ATM = 22; {$EXTERNALSYM AF_ATM}
  AF_INET6 = 23; {$EXTERNALSYM AF_INET6}
  AF_CLUSTER = 24; {$EXTERNALSYM AF_CLUSTER}
  AF_12844 = 25; {$EXTERNALSYM AF_12844}
  AF_IRDA = 26; {$EXTERNALSYM AF_IRDA}
  AF_NETDES = 28; {$EXTERNALSYM AF_NETDES}
  AF_TCNPROCESS = 29; {$EXTERNALSYM AF_TCNPROCESS}
  AF_TCNMESSAGE = 30; {$EXTERNALSYM AF_TCNMESSAGE}
  AF_ICLFXBM = 31; {$EXTERNALSYM AF_ICLFXBM}
  AF_MAX = 32; {$EXTERNALSYM AF_MAX}


  //


  //

type
{$EXTERNALSYM sockaddr}
  sockaddr = record
    case Integer of
      0:
        (sin_family: Word;
          sin_port: Word;
          sin_zero: array [0 .. 11] of AnsiChar);
      1:
        (sa_family: Word;
          sa_data: array [0 .. 13] of AnsiChar)
  end;

  TSockAddr = sockaddr;
  PSockAddr = ^sockaddr;

  //

  //

  //


  //

const
  _SS_MAXSIZE = 128; {$EXTERNALSYM _SS_MAXSIZE}
  _SS_ALIGNSIZE = SizeOf(Int64); {$EXTERNALSYM _SS_ALIGNSIZE}


  //

  //

  _SS_PAD1SIZE = _SS_ALIGNSIZE - SizeOf(short); {$EXTERNALSYM _SS_PAD1SIZE}
  _SS_PAD2SIZE = _SS_MAXSIZE - (SizeOf(short) + _SS_PAD1SIZE + _SS_ALIGNSIZE); {$EXTERNALSYM _SS_PAD2SIZE}

type
{$EXTERNALSYM sockaddr_storage}
  sockaddr_storage = record
    ss_family: short;
    __ss_pad1: array [0 .. _SS_PAD1SIZE - 1] of AnsiChar;

    __ss_align: Int64;
    __ss_pad2: array [0 .. _SS_PAD2SIZE - 1] of AnsiChar;

  end;

  TSockAddrStorage = sockaddr_storage;
  PSockAddrStorage = ^sockaddr_storage;
{$EXTERNALSYM sockproto}

  sockproto = record
    sp_family: Word;
    sp_protocol: Word;
  end;

  TSockProto = sockproto;
  PSockProto = ^sockproto;

const
  PF_UNSPEC = AF_UNSPEC; {$EXTERNALSYM PF_UNSPEC}
  PF_UNIX = AF_UNIX; {$EXTERNALSYM PF_UNIX}
  PF_INET = AF_INET; {$EXTERNALSYM PF_INET}
  PF_IMPLINK = AF_IMPLINK; {$EXTERNALSYM PF_IMPLINK}
  PF_PUP = AF_PUP; {$EXTERNALSYM PF_PUP}
  PF_CHAOS = AF_CHAOS; {$EXTERNALSYM PF_CHAOS}
  PF_NS = AF_NS; {$EXTERNALSYM PF_NS}
  PF_IPX = AF_IPX; {$EXTERNALSYM PF_IPX}
  PF_ISO = AF_ISO; {$EXTERNALSYM PF_ISO}
  PF_OSI = AF_OSI; {$EXTERNALSYM PF_OSI}
  PF_ECMA = AF_ECMA; {$EXTERNALSYM PF_ECMA}
  PF_DATAKIT = AF_DATAKIT; {$EXTERNALSYM PF_DATAKIT}
  PF_CCITT = AF_CCITT; {$EXTERNALSYM PF_CCITT}
  PF_SNA = AF_SNA; {$EXTERNALSYM PF_SNA}
  PF_DECnet = AF_DECnet; {$EXTERNALSYM PF_DECnet}
  PF_DLI = AF_DLI; {$EXTERNALSYM PF_DLI}
  PF_LAT = AF_LAT; {$EXTERNALSYM PF_LAT}
  PF_HYLINK = AF_HYLINK; {$EXTERNALSYM PF_HYLINK}
  PF_APPLETALK = AF_APPLETALK; {$EXTERNALSYM PF_APPLETALK}
  PF_VOICEVIEW = AF_VOICEVIEW; {$EXTERNALSYM PF_VOICEVIEW}
  PF_FIREFOX = AF_FIREFOX; {$EXTERNALSYM PF_FIREFOX}
  PF_UNKNOWN1 = AF_UNKNOWN1; {$EXTERNALSYM PF_UNKNOWN1}
  PF_BAN = AF_BAN; {$EXTERNALSYM PF_BAN}
  PF_ATM = AF_ATM; {$EXTERNALSYM PF_ATM}
  PF_INET6 = AF_INET6; {$EXTERNALSYM PF_INET6}
  PF_MAX = AF_MAX; {$EXTERNALSYM PF_MAX}

type
{$EXTERNALSYM linger}
  linger = record
    l_onoff: Word;
    l_linger: Word;
  end;

  TLinger = linger;
  PLinger = ^linger;

const
  SOL_SOCKET = $FFFF; {$EXTERNALSYM SOL_SOCKET}
  SOMAXCONN = $7FFFFFFF; {$EXTERNALSYM SOMAXCONN}
  MSG_OOB = $1; {$EXTERNALSYM MSG_OOB}
  MSG_PEEK = $2; {$EXTERNALSYM MSG_PEEK}
  MSG_DONTROUTE = $4; {$EXTERNALSYM MSG_DONTROUTE}
  // do not complete until packet is completely
  MSG_WAITALL = $8; {$EXTERNALSYM MSG_WAITALL}
  MSG_PARTIAL = $8000; {$EXTERNALSYM MSG_PARTIAL}
  MSG_INTERRUPT = $10; {$EXTERNALSYM MSG_INTERRUPT}
  MSG_MAXIOVLEN = 16; {$EXTERNALSYM MSG_MAXIOVLEN}
  MAXGETHOSTSTRUCT = 1024; {$EXTERNALSYM MAXGETHOSTSTRUCT}
  FD_READ_BIT = 0; {$EXTERNALSYM FD_READ_BIT}
  FD_READ = 1 shl FD_READ_BIT; {$EXTERNALSYM FD_READ}
  FD_WRITE_BIT = 1; {$EXTERNALSYM FD_WRITE_BIT}
  FD_WRITE = 1 shl FD_WRITE_BIT; {$EXTERNALSYM FD_WRITE}
  FD_OOB_BIT = 2; {$EXTERNALSYM FD_OOB_BIT}
  FD_OOB = 1 shl FD_OOB_BIT; {$EXTERNALSYM FD_OOB}
  FD_ACCEPT_BIT = 3; {$EXTERNALSYM FD_ACCEPT_BIT}
  FD_ACCEPT = 1 shl FD_ACCEPT_BIT; {$EXTERNALSYM FD_ACCEPT}
  FD_CONNECT_BIT = 4; {$EXTERNALSYM FD_CONNECT_BIT}
  FD_CONNECT = 1 shl FD_CONNECT_BIT; {$EXTERNALSYM FD_CONNECT}
  FD_CLOSE_BIT = 5; {$EXTERNALSYM FD_CLOSE_BIT}
  FD_CLOSE = 1 shl FD_CLOSE_BIT; {$EXTERNALSYM FD_CLOSE}
  FD_QOS_BIT = 6; {$EXTERNALSYM FD_QOS_BIT}
  FD_QOS = 1 shl FD_QOS_BIT; {$EXTERNALSYM FD_QOS}
  FD_GROUP_QOS_BIT = 7; {$EXTERNALSYM FD_GROUP_QOS_BIT}
  FD_GROUP_QOS = 1 shl FD_GROUP_QOS_BIT; {$EXTERNALSYM FD_GROUP_QOS}
  FD_ROUTING_INTERFACE_CHANGE_BIT = 8; {$EXTERNALSYM FD_ROUTING_INTERFACE_CHANGE_BIT}
  FD_ROUTING_INTERFACE_CHANGE = 1 shl FD_ROUTING_INTERFACE_CHANGE_BIT; {$EXTERNALSYM FD_ROUTING_INTERFACE_CHANGE}
  FD_ADDRESS_LIST_CHANGE_BIT = 9; {$EXTERNALSYM FD_ADDRESS_LIST_CHANGE_BIT}
  FD_ADDRESS_LIST_CHANGE = 1 shl FD_ADDRESS_LIST_CHANGE_BIT; {$EXTERNALSYM FD_ADDRESS_LIST_CHANGE}
  FD_MAX_EVENTS = 10; {$EXTERNALSYM FD_MAX_EVENTS}
  FD_ALL_EVENTS = (1 shl FD_MAX_EVENTS) - 1; {$EXTERNALSYM FD_ALL_EVENTS}
  WSABASEERR = 10000; {$EXTERNALSYM WSABASEERR}
  WSAEINTR = WSABASEERR + 4; {$EXTERNALSYM WSAEINTR}
  WSAEBADF = WSABASEERR + 9; {$EXTERNALSYM WSAEBADF}
  WSAEACCES = WSABASEERR + 13; {$EXTERNALSYM WSAEACCES}
  WSAEFAULT = WSABASEERR + 14; {$EXTERNALSYM WSAEFAULT}
  WSAEINVAL = WSABASEERR + 22; {$EXTERNALSYM WSAEINVAL}
  WSAEMFILE = WSABASEERR + 24; {$EXTERNALSYM WSAEMFILE}
  WSAEWOULDBLOCK = WSABASEERR + 35; {$EXTERNALSYM WSAEWOULDBLOCK}
  WSAEINPROGRESS = WSABASEERR + 36; {$EXTERNALSYM WSAEINPROGRESS}
  WSAEALREADY = WSABASEERR + 37; {$EXTERNALSYM WSAEALREADY}
  WSAENOTSOCK = WSABASEERR + 38; {$EXTERNALSYM WSAENOTSOCK}
  WSAEDESTADDRREQ = WSABASEERR + 39; {$EXTERNALSYM WSAEDESTADDRREQ}
  WSAEMSGSIZE = WSABASEERR + 40; {$EXTERNALSYM WSAEMSGSIZE}
  WSAEPROTOTYPE = WSABASEERR + 41; {$EXTERNALSYM WSAEPROTOTYPE}
  WSAENOPROTOOPT = WSABASEERR + 42; {$EXTERNALSYM WSAENOPROTOOPT}
  WSAEPROTONOSUPPORT = WSABASEERR + 43; {$EXTERNALSYM WSAEPROTONOSUPPORT}
  WSAESOCKTNOSUPPORT = WSABASEERR + 44; {$EXTERNALSYM WSAESOCKTNOSUPPORT}
  WSAEOPNOTSUPP = WSABASEERR + 45; {$EXTERNALSYM WSAEOPNOTSUPP}
  WSAEPFNOSUPPORT = WSABASEERR + 46; {$EXTERNALSYM WSAEPFNOSUPPORT}
  WSAEAFNOSUPPORT = WSABASEERR + 47; {$EXTERNALSYM WSAEAFNOSUPPORT}
  WSAEADDRINUSE = WSABASEERR + 48; {$EXTERNALSYM WSAEADDRINUSE}
  WSAEADDRNOTAVAIL = WSABASEERR + 49; {$EXTERNALSYM WSAEADDRNOTAVAIL}
  WSAENETDOWN = WSABASEERR + 50; {$EXTERNALSYM WSAENETDOWN}
  WSAENETUNREACH = WSABASEERR + 51; {$EXTERNALSYM WSAENETUNREACH}
  WSAENETRESET = WSABASEERR + 52; {$EXTERNALSYM WSAENETRESET}
  WSAECONNABORTED = WSABASEERR + 53; {$EXTERNALSYM WSAECONNABORTED}
  WSAECONNRESET = WSABASEERR + 54; {$EXTERNALSYM WSAECONNRESET}
  WSAENOBUFS = WSABASEERR + 55; {$EXTERNALSYM WSAENOBUFS}
  WSAEISCONN = WSABASEERR + 56; {$EXTERNALSYM WSAEISCONN}
  WSAENOTCONN = WSABASEERR + 57; {$EXTERNALSYM WSAENOTCONN}
  WSAESHUTDOWN = WSABASEERR + 58; {$EXTERNALSYM WSAESHUTDOWN}
  WSAETOOMANYREFS = WSABASEERR + 59; {$EXTERNALSYM WSAETOOMANYREFS}
  WSAETIMEDOUT = WSABASEERR + 60; {$EXTERNALSYM WSAETIMEDOUT}
  WSAECONNREFUSED = WSABASEERR + 61; {$EXTERNALSYM WSAECONNREFUSED}
  WSAELOOP = WSABASEERR + 62; {$EXTERNALSYM WSAELOOP}
  WSAENAMETOOLONG = WSABASEERR + 63; {$EXTERNALSYM WSAENAMETOOLONG}
  WSAEHOSTDOWN = WSABASEERR + 64; {$EXTERNALSYM WSAEHOSTDOWN}
  WSAEHOSTUNREACH = WSABASEERR + 65; {$EXTERNALSYM WSAEHOSTUNREACH}
  WSAENOTEMPTY = WSABASEERR + 66; {$EXTERNALSYM WSAENOTEMPTY}
  WSAEPROCLIM = WSABASEERR + 67; {$EXTERNALSYM WSAEPROCLIM}
  WSAEUSERS = WSABASEERR + 68; {$EXTERNALSYM WSAEUSERS}
  WSAEDQUOT = WSABASEERR + 69; {$EXTERNALSYM WSAEDQUOT}
  WSAESTALE = WSABASEERR + 70; {$EXTERNALSYM WSAESTALE}
  WSAEREMOTE = WSABASEERR + 71; {$EXTERNALSYM WSAEREMOTE}
  WSASYSNOTREADY = WSABASEERR + 91; {$EXTERNALSYM WSASYSNOTREADY}
  WSAVERNOTSUPPORTED = WSABASEERR + 92; {$EXTERNALSYM WSAVERNOTSUPPORTED}
  WSANOTINITIALISED = WSABASEERR + 93; {$EXTERNALSYM WSANOTINITIALISED}
  WSAEDISCON = WSABASEERR + 101; {$EXTERNALSYM WSAEDISCON}
  WSAENOMORE = WSABASEERR + 102; {$EXTERNALSYM WSAENOMORE}
  WSAECANCELLED = WSABASEERR + 103; {$EXTERNALSYM WSAECANCELLED}
  WSAEINVALIDPROCTABLE = WSABASEERR + 104; {$EXTERNALSYM WSAEINVALIDPROCTABLE}
  WSAEINVALIDPROVIDER = WSABASEERR + 105; {$EXTERNALSYM WSAEINVALIDPROVIDER}
  WSAEPROVIDERFAILEDINIT = WSABASEERR + 106; {$EXTERNALSYM WSAEPROVIDERFAILEDINIT}
  WSASYSCALLFAILURE = WSABASEERR + 107; {$EXTERNALSYM WSASYSCALLFAILURE}
  WSASERVICE_NOT_FOUND = WSABASEERR + 108; {$EXTERNALSYM WSASERVICE_NOT_FOUND}
  WSATYPE_NOT_FOUND = WSABASEERR + 109; {$EXTERNALSYM WSATYPE_NOT_FOUND}
  WSA_E_NO_MORE = WSABASEERR + 110; {$EXTERNALSYM WSA_E_NO_MORE}
  WSA_E_CANCELLED = WSABASEERR + 111; {$EXTERNALSYM WSA_E_CANCELLED}
  WSAEREFUSED = WSABASEERR + 112; {$EXTERNALSYM WSAEREFUSED}
  WSAHOST_NOT_FOUND = WSABASEERR + 1001; {$EXTERNALSYM WSAHOST_NOT_FOUND}
  WSATRY_AGAIN = WSABASEERR + 1002; {$EXTERNALSYM WSATRY_AGAIN}
  WSANO_RECOVERY = WSABASEERR + 1003; {$EXTERNALSYM WSANO_RECOVERY}
  WSANO_DATA = WSABASEERR + 1004; {$EXTERNALSYM WSANO_DATA}
  WSA_QOS_RECEIVERS = WSABASEERR + 1005; {$EXTERNALSYM WSA_QOS_RECEIVERS}
  WSA_QOS_SENDERS = WSABASEERR + 1006; {$EXTERNALSYM WSA_QOS_SENDERS}
  WSA_QOS_NO_SENDERS = WSABASEERR + 1007; {$EXTERNALSYM WSA_QOS_NO_SENDERS}
  WSA_QOS_NO_RECEIVERS = WSABASEERR + 1008; {$EXTERNALSYM WSA_QOS_NO_RECEIVERS}
  WSA_QOS_REQUEST_CONFIRMED = WSABASEERR + 1009; {$EXTERNALSYM WSA_QOS_REQUEST_CONFIRMED}
  WSA_QOS_ADMISSION_FAILURE = WSABASEERR + 1010; {$EXTERNALSYM WSA_QOS_ADMISSION_FAILURE}
  WSA_QOS_POLICY_FAILURE = WSABASEERR + 1011; {$EXTERNALSYM WSA_QOS_POLICY_FAILURE}
  WSA_QOS_BAD_STYLE = WSABASEERR + 1012; {$EXTERNALSYM WSA_QOS_BAD_STYLE}
  WSA_QOS_BAD_OBJECT = WSABASEERR + 1013; {$EXTERNALSYM WSA_QOS_BAD_OBJECT}
  WSA_QOS_TRAFFIC_CTRL_ERROR = WSABASEERR + 1014; {$EXTERNALSYM WSA_QOS_TRAFFIC_CTRL_ERROR}
  WSA_QOS_GENERIC_ERROR = WSABASEERR + 1015; {$EXTERNALSYM WSA_QOS_GENERIC_ERROR}
  WSA_QOS_ESERVICETYPE = WSABASEERR + 1016; {$EXTERNALSYM WSA_QOS_ESERVICETYPE}
  WSA_QOS_EFLOWSPEC = WSABASEERR + 1017; {$EXTERNALSYM WSA_QOS_EFLOWSPEC}
  WSA_QOS_EPROVSPECBUF = WSABASEERR + 1018; {$EXTERNALSYM WSA_QOS_EPROVSPECBUF}
  WSA_QOS_EFILTERSTYLE = WSABASEERR + 1019; {$EXTERNALSYM WSA_QOS_EFILTERSTYLE}
  WSA_QOS_EFILTERTYPE = WSABASEERR + 1020; {$EXTERNALSYM WSA_QOS_EFILTERTYPE}
  WSA_QOS_EFILTERCOUNT = WSABASEERR + 1021; {$EXTERNALSYM WSA_QOS_EFILTERCOUNT}
  WSA_QOS_EOBJLENGTH = WSABASEERR + 1022; {$EXTERNALSYM WSA_QOS_EOBJLENGTH}
  WSA_QOS_EFLOWCOUNT = WSABASEERR + 1023; {$EXTERNALSYM WSA_QOS_EFLOWCOUNT}
  WSA_QOS_EUNKOWNPSOBJ = WSABASEERR + 1024; {$EXTERNALSYM WSA_QOS_EUNKOWNPSOBJ}
  WSA_QOS_EPOLICYOBJ = WSABASEERR + 1025; {$EXTERNALSYM WSA_QOS_EPOLICYOBJ}
  WSA_QOS_EFLOWDESC = WSABASEERR + 1026; {$EXTERNALSYM WSA_QOS_EFLOWDESC}
  WSA_QOS_EPSFLOWSPEC = WSABASEERR + 1027; {$EXTERNALSYM WSA_QOS_EPSFLOWSPEC}
  WSA_QOS_EPSFILTERSPEC = WSABASEERR + 1028; {$EXTERNALSYM WSA_QOS_EPSFILTERSPEC}
  WSA_QOS_ESDMODEOBJ = WSABASEERR + 1029; {$EXTERNALSYM WSA_QOS_ESDMODEOBJ}
  WSA_QOS_ESHAPERATEOBJ = WSABASEERR + 1030; {$EXTERNALSYM WSA_QOS_ESHAPERATEOBJ}
  WSA_QOS_RESERVED_PETYPE = WSABASEERR + 1031; {$EXTERNALSYM WSA_QOS_RESERVED_PETYPE}
function h_errno: Integer; {$EXTERNALSYM h_errno}

const
  HOST_NOT_FOUND = WSAHOST_NOT_FOUND; {$EXTERNALSYM HOST_NOT_FOUND}
  TRY_AGAIN = WSATRY_AGAIN; {$EXTERNALSYM TRY_AGAIN}
  NO_RECOVERY = WSANO_RECOVERY; {$EXTERNALSYM NO_RECOVERY}
  NO_DATA = WSANO_DATA; {$EXTERNALSYM NO_DATA}
  WSANO_ADDRESS = WSANO_DATA; {$EXTERNALSYM WSANO_ADDRESS}
  NO_ADDRESS = WSANO_ADDRESS; {$EXTERNALSYM NO_ADDRESS}
  EWOULDBLOCK = WSAEWOULDBLOCK; {$EXTERNALSYM EWOULDBLOCK}
  EINPROGRESS = WSAEINPROGRESS; {$EXTERNALSYM EINPROGRESS}
  EALREADY = WSAEALREADY; {$EXTERNALSYM EALREADY}
  ENOTSOCK = WSAENOTSOCK; {$EXTERNALSYM ENOTSOCK}
  EDESTADDRREQ = WSAEDESTADDRREQ; {$EXTERNALSYM EDESTADDRREQ}
  EMSGSIZE = WSAEMSGSIZE; {$EXTERNALSYM EMSGSIZE}
  EPROTOTYPE = WSAEPROTOTYPE; {$EXTERNALSYM EPROTOTYPE}
  ENOPROTOOPT = WSAENOPROTOOPT; {$EXTERNALSYM ENOPROTOOPT}
  EPROTONOSUPPORT = WSAEPROTONOSUPPORT; {$EXTERNALSYM EPROTONOSUPPORT}
  ESOCKTNOSUPPORT = WSAESOCKTNOSUPPORT; {$EXTERNALSYM ESOCKTNOSUPPORT}
  EOPNOTSUPP = WSAEOPNOTSUPP; {$EXTERNALSYM EOPNOTSUPP}
  EPFNOSUPPORT = WSAEPFNOSUPPORT; {$EXTERNALSYM EPFNOSUPPORT}
  EAFNOSUPPORT = WSAEAFNOSUPPORT; {$EXTERNALSYM EAFNOSUPPORT}
  EADDRINUSE = WSAEADDRINUSE; {$EXTERNALSYM EADDRINUSE}
  EADDRNOTAVAIL = WSAEADDRNOTAVAIL; {$EXTERNALSYM EADDRNOTAVAIL}
  ENETDOWN = WSAENETDOWN; {$EXTERNALSYM ENETDOWN}
  ENETUNREACH = WSAENETUNREACH; {$EXTERNALSYM ENETUNREACH}
  ENETRESET = WSAENETRESET; {$EXTERNALSYM ENETRESET}
  ECONNABORTED = WSAECONNABORTED; {$EXTERNALSYM ECONNABORTED}
  ECONNRESET = WSAECONNRESET; {$EXTERNALSYM ECONNRESET}
  ENOBUFS = WSAENOBUFS; {$EXTERNALSYM ENOBUFS}
  EISCONN = WSAEISCONN; {$EXTERNALSYM EISCONN}
  ENOTCONN = WSAENOTCONN; {$EXTERNALSYM ENOTCONN}
  ESHUTDOWN = WSAESHUTDOWN; {$EXTERNALSYM ESHUTDOWN}
  ETOOMANYREFS = WSAETOOMANYREFS; {$EXTERNALSYM ETOOMANYREFS}
  ETIMEDOUT = WSAETIMEDOUT; {$EXTERNALSYM ETIMEDOUT}
  ECONNREFUSED = WSAECONNREFUSED; {$EXTERNALSYM ECONNREFUSED}
  ELOOP = WSAELOOP; {$EXTERNALSYM ELOOP}
  ENAMETOOLONG = WSAENAMETOOLONG; {$EXTERNALSYM ENAMETOOLONG}
  EHOSTDOWN = WSAEHOSTDOWN; {$EXTERNALSYM EHOSTDOWN}
  EHOSTUNREACH = WSAEHOSTUNREACH; {$EXTERNALSYM EHOSTUNREACH}
  ENOTEMPTY = WSAENOTEMPTY; {$EXTERNALSYM ENOTEMPTY}
  EPROCLIM = WSAEPROCLIM; {$EXTERNALSYM EPROCLIM}
  EUSERS = WSAEUSERS; {$EXTERNALSYM EUSERS}
  EDQUOT = WSAEDQUOT; {$EXTERNALSYM EDQUOT}
  ESTALE = WSAESTALE; {$EXTERNALSYM ESTALE}
  EREMOTE = WSAEREMOTE; {$EXTERNALSYM EREMOTE}

type
  TWsaEvent = THandle;
  PWsaEvent = ^THandle;
  TWsaOverlapped = OVERLAPPED;
  PWsaOverlapped = ^OVERLAPPED;

const
  WSA_IO_PENDING = ERROR_IO_PENDING; {$EXTERNALSYM WSA_IO_PENDING}
  WSA_IO_INCOMPLETE = ERROR_IO_INCOMPLETE; {$EXTERNALSYM WSA_IO_INCOMPLETE}
  WSA_INVALID_HANDLE = ERROR_INVALID_HANDLE; {$EXTERNALSYM WSA_INVALID_HANDLE}
  WSA_INVALID_PARAMETER = ERROR_INVALID_PARAMETER; {$EXTERNALSYM WSA_INVALID_PARAMETER}
  WSA_NOT_ENOUGH_MEMORY = ERROR_NOT_ENOUGH_MEMORY; {$EXTERNALSYM WSA_NOT_ENOUGH_MEMORY}
  WSA_OPERATION_ABORTED = ERROR_OPERATION_ABORTED; {$EXTERNALSYM WSA_OPERATION_ABORTED}
  WSA_INVALID_EVENT = 0; {$EXTERNALSYM WSA_INVALID_EVENT}
  WSA_MAXIMUM_WAIT_EVENTS = MAXIMUM_WAIT_OBJECTS; {$EXTERNALSYM WSA_MAXIMUM_WAIT_EVENTS}
  WSA_WAIT_FAILED = WAIT_FAILED; {$EXTERNALSYM WSA_WAIT_FAILED}
  WSA_WAIT_EVENT_0 = WAIT_OBJECT_0; {$EXTERNALSYM WSA_WAIT_EVENT_0}
  WSA_WAIT_IO_COMPLETION = WAIT_IO_COMPLETION; {$EXTERNALSYM WSA_WAIT_IO_COMPLETION}
  WSA_WAIT_TIMEOUT = WAIT_TIMEOUT; {$EXTERNALSYM WSA_WAIT_TIMEOUT}
  WSA_INFINITE = INFINITE; {$EXTERNALSYM WSA_INFINITE}

type
  TWsaBuf = record
    len: UInt32;
    buf: PAnsiChar;
  end;

  PWsaBuf = ^TWsaBuf;

  TQualityOfService = record
    SendingFlowspec: FLOWSPEC;
    ReceivingFlowspec: FLOWSPEC;
    ProviderSpecific: TWsaBuf;
  end;

  PQualityOfService = ^TQualityOfService;

const
  CF_ACCEPT = $0000; {$EXTERNALSYM CF_ACCEPT}
  CF_REJECT = $0001; {$EXTERNALSYM CF_REJECT}
  CF_DEFER = $0002; {$EXTERNALSYM CF_DEFER}
  SD_RECEIVE = $00; {$EXTERNALSYM SD_RECEIVE}
  SD_SEND = $01; {$EXTERNALSYM SD_SEND}
  SD_BOTH = $02; {$EXTERNALSYM SD_BOTH}

type
  GROUP = Cardinal;

  TGroup = GROUP;
  PGroup = ^GROUP;

const
  SG_UNCONSTRAINED_GROUP = $01; {$EXTERNALSYM SG_UNCONSTRAINED_GROUP}
  SG_CONSTRAINED_GROUP = $02; {$EXTERNALSYM SG_CONSTRAINED_GROUP}


  //

  //

type
  _WSANETWORKEVENTS = record
    lNetworkEvents: Longint;
    iErrorCode: array [0 .. FD_MAX_EVENTS - 1] of Integer;
  end;

  WSANETWORKEVENTS = _WSANETWORKEVENTS;

  LPWSANETWORKEVENTS = ^WSANETWORKEVENTS;

  TWsaNetworkEvents = WSANETWORKEVENTS;
  PWsaNetworkEvents = LPWSANETWORKEVENTS;

  //


  //

const
  MAX_PROTOCOL_CHAIN = 7; {$EXTERNALSYM MAX_PROTOCOL_CHAIN}
  BASE_PROTOCOL = 1; {$EXTERNALSYM BASE_PROTOCOL}
  LAYERED_PROTOCOL = 0; {$EXTERNALSYM LAYERED_PROTOCOL}

type
  _WSAPROTOCOLCHAIN = record
    ChainLen: Integer;

    ChainEntries: array [0 .. MAX_PROTOCOL_CHAIN - 1] of DWORD;

  end;

  WSAPROTOCOLCHAIN = _WSAPROTOCOLCHAIN;

  LPWSAPROTOCOLCHAIN = ^WSAPROTOCOLCHAIN;

  TWsaProtocolChain = WSAPROTOCOLCHAIN;
  PWsaProtocolChain = LPWSAPROTOCOLCHAIN;

const
  WSAPROTOCOL_LEN = 255; {$EXTERNALSYM WSAPROTOCOL_LEN}

type
  _WSAPROTOCOL_INFOA = record
    dwServiceFlags1: DWORD;
    dwServiceFlags2: DWORD;
    dwServiceFlags3: DWORD;
    dwServiceFlags4: DWORD;
    dwProviderFlags: DWORD;
    ProviderId: TGUID;
    dwCatalogEntryId: DWORD;
    ProtocolChain: WSAPROTOCOLCHAIN;
    iVersion: Integer;
    iAddressFamily: Integer;
    iMaxSockAddr: Integer;
    iMinSockAddr: Integer;
    iSocketType: Integer;
    iProtocol: Integer;
    iProtocolMaxOffset: Integer;
    iNetworkByteOrder: Integer;
    iSecurityScheme: Integer;
    dwMessageSize: DWORD;
    dwProviderReserved: DWORD;
    szProtocol: array [0 .. WSAPROTOCOL_LEN] of AnsiChar;
  end;

  WSAPROTOCOL_INFOA = _WSAPROTOCOL_INFOA;
  LPWSAPROTOCOL_INFOA = ^WSAPROTOCOL_INFOA;

  TWsaProtocolInfoA = WSAPROTOCOL_INFOA;
  PWsaProtocolInfoA = LPWSAPROTOCOL_INFOA;

  _WSAPROTOCOL_INFOW = record
    dwServiceFlags1: DWORD;
    dwServiceFlags2: DWORD;
    dwServiceFlags3: DWORD;
    dwServiceFlags4: DWORD;
    dwProviderFlags: DWORD;
    ProviderId: TGUID;
    dwCatalogEntryId: DWORD;
    ProtocolChain: WSAPROTOCOLCHAIN;
    iVersion: Integer;
    iAddressFamily: Integer;
    iMaxSockAddr: Integer;
    iMinSockAddr: Integer;
    iSocketType: Integer;
    iProtocol: Integer;
    iProtocolMaxOffset: Integer;
    iNetworkByteOrder: Integer;
    iSecurityScheme: Integer;
    dwMessageSize: DWORD;
    dwProviderReserved: DWORD;
    szProtocol: array [0 .. WSAPROTOCOL_LEN] of WideChar;
  end;

  WSAPROTOCOL_INFOW = _WSAPROTOCOL_INFOW;

  LPWSAPROTOCOL_INFOW = ^WSAPROTOCOL_INFOW;

  TWsaProtocolInfoW = WSAPROTOCOL_INFOW;
  PWsaProtocolInfoW = LPWSAPROTOCOL_INFOW;
{$IFDEF UNICODE}
  WSAPROTOCOL_INFO = WSAPROTOCOL_INFOW;

  LPWSAPROTOCOL_INFO = LPWSAPROTOCOL_INFOW;

  TWsaProtocolInfo = TWsaProtocolInfoW;
  PWsaProtocolInfo = PWsaProtocolInfoW;
{$ELSE}
  WSAPROTOCOL_INFO = WSAPROTOCOL_INFOA;

  LPWSAPROTOCOL_INFO = LPWSAPROTOCOL_INFOA;

  TWsaProtocolInfo = TWsaProtocolInfoA;
  PWsaProtocolInfo = PWsaProtocolInfoA;
{$ENDIF UNICODE}

const
  PFL_MULTIPLE_PROTO_ENTRIES = $00000001; {$EXTERNALSYM PFL_MULTIPLE_PROTO_ENTRIES}
  PFL_RECOMMENDED_PROTO_ENTRY = $00000002; {$EXTERNALSYM PFL_RECOMMENDED_PROTO_ENTRY}
  PFL_HIDDEN = $00000004; {$EXTERNALSYM PFL_HIDDEN}
  PFL_MATCHES_PROTOCOL_ZERO = $00000008; {$EXTERNALSYM PFL_MATCHES_PROTOCOL_ZERO}
  XP1_CONNECTIONLESS = $00000001; {$EXTERNALSYM XP1_CONNECTIONLESS}
  XP1_GUARANTEED_DELIVERY = $00000002; {$EXTERNALSYM XP1_GUARANTEED_DELIVERY}
  XP1_GUARANTEED_ORDER = $00000004; {$EXTERNALSYM XP1_GUARANTEED_ORDER}
  XP1_MESSAGE_ORIENTED = $00000008; {$EXTERNALSYM XP1_MESSAGE_ORIENTED}
  XP1_PSEUDO_STREAM = $00000010; {$EXTERNALSYM XP1_PSEUDO_STREAM}
  XP1_GRACEFUL_CLOSE = $00000020; {$EXTERNALSYM XP1_GRACEFUL_CLOSE}
  XP1_EXPEDITED_DATA = $00000040; {$EXTERNALSYM XP1_EXPEDITED_DATA}
  XP1_CONNECT_DATA = $00000080; {$EXTERNALSYM XP1_CONNECT_DATA}
  XP1_DISCONNECT_DATA = $00000100; {$EXTERNALSYM XP1_DISCONNECT_DATA}
  XP1_SUPPORT_BROADCAST = $00000200; {$EXTERNALSYM XP1_SUPPORT_BROADCAST}
  XP1_SUPPORT_MULTIPOINT = $00000400; {$EXTERNALSYM XP1_SUPPORT_MULTIPOINT}
  XP1_MULTIPOINT_CONTROL_PLANE = $00000800; {$EXTERNALSYM XP1_MULTIPOINT_CONTROL_PLANE}
  XP1_MULTIPOINT_DATA_PLANE = $00001000; {$EXTERNALSYM XP1_MULTIPOINT_DATA_PLANE}
  XP1_QOS_SUPPORTED = $00002000; {$EXTERNALSYM XP1_QOS_SUPPORTED}
  XP1_INTERRUPT = $00004000; {$EXTERNALSYM XP1_INTERRUPT}
  XP1_UNI_SEND = $00008000; {$EXTERNALSYM XP1_UNI_SEND}
  XP1_UNI_RECV = $00010000; {$EXTERNALSYM XP1_UNI_RECV}
  XP1_IFS_HANDLES = $00020000; {$EXTERNALSYM XP1_IFS_HANDLES}
  XP1_PARTIAL_MESSAGE = $00040000; {$EXTERNALSYM XP1_PARTIAL_MESSAGE}
  BIGENDIAN = $0000; {$EXTERNALSYM BIGENDIAN}
  LITTLEENDIAN = $0001; {$EXTERNALSYM LITTLEENDIAN}
  SECURITY_PROTOCOL_NONE = $0000; {$EXTERNALSYM SECURITY_PROTOCOL_NONE}
  JL_SENDER_ONLY = $01; {$EXTERNALSYM JL_SENDER_ONLY}
  JL_RECEIVER_ONLY = $02; {$EXTERNALSYM JL_RECEIVER_ONLY}
  JL_BOTH = $04; {$EXTERNALSYM JL_BOTH}
  WSA_FLAG_OVERLAPPED = $01; {$EXTERNALSYM WSA_FLAG_OVERLAPPED}
  WSA_FLAG_MULTIPOINT_C_ROOT = $02; {$EXTERNALSYM WSA_FLAG_MULTIPOINT_C_ROOT}
  WSA_FLAG_MULTIPOINT_C_LEAF = $04; {$EXTERNALSYM WSA_FLAG_MULTIPOINT_C_LEAF}
  WSA_FLAG_MULTIPOINT_D_ROOT = $08; {$EXTERNALSYM WSA_FLAG_MULTIPOINT_D_ROOT}
  WSA_FLAG_MULTIPOINT_D_LEAF = $10; {$EXTERNALSYM WSA_FLAG_MULTIPOINT_D_LEAF}
  IOC_UNIX = $00000000; {$EXTERNALSYM IOC_UNIX}
  IOC_WS2 = $08000000; {$EXTERNALSYM IOC_WS2}
  IOC_PROTOCOL = $10000000; {$EXTERNALSYM IOC_PROTOCOL}
  IOC_VENDOR = $18000000; {$EXTERNALSYM IOC_VENDOR}
function _WSAIO(x, y: DWORD): DWORD; {$EXTERNALSYM _WSAIO}
function _WSAIOR(x, y: DWORD): DWORD; {$EXTERNALSYM _WSAIOR}
function _WSAIOW(x, y: DWORD): DWORD; {$EXTERNALSYM _WSAIOW}
function _WSAIORW(x, y: DWORD): DWORD; {$EXTERNALSYM _WSAIORW}

const
  SIO_ASSOCIATE_HANDLE = IOC_INOUT or IOC_WS2 or 1;  {$EXTERNALSYM SIO_ASSOCIATE_HANDLE}
  SIO_ENABLE_CIRCULAR_QUEUEING = IOC_VOID or IOC_WS2 or 2; {$EXTERNALSYM SIO_ENABLE_CIRCULAR_QUEUEING}
  SIO_FIND_ROUTE = IOC_OUT or IOC_WS2 or 3; {$EXTERNALSYM SIO_FIND_ROUTE}
  SIO_FLUSH = IOC_VOID or IOC_WS2 or 4; {$EXTERNALSYM SIO_FLUSH}
  SIO_GET_BROADCAST_ADDRESS = IOC_OUT or IOC_WS2 or 5; {$EXTERNALSYM SIO_GET_BROADCAST_ADDRESS}
  SIO_GET_EXTENSION_FUNCTION_POINTER = IOC_INOUT or IOC_WS2 or 6; {$EXTERNALSYM SIO_GET_EXTENSION_FUNCTION_POINTER}
  SIO_GET_QOS = IOC_INOUT or IOC_WS2 or 7; {$EXTERNALSYM SIO_GET_QOS}
  SIO_GET_GROUP_QOS = IOC_INOUT or IOC_WS2 or 8; {$EXTERNALSYM SIO_GET_GROUP_QOS}
  SIO_MULTIPOINT_LOOPBACK = IOC_INOUT or IOC_WS2 or 9; {$EXTERNALSYM SIO_MULTIPOINT_LOOPBACK}
  SIO_MULTICAST_SCOPE = IOC_INOUT or IOC_WS2 or 10;  {$EXTERNALSYM SIO_MULTICAST_SCOPE}
  SIO_SET_QOS = IOC_INOUT or IOC_WS2 or 11;  {$EXTERNALSYM SIO_SET_QOS}
  SIO_SET_GROUP_QOS = IOC_INOUT or IOC_WS2 or 12; {$EXTERNALSYM SIO_SET_GROUP_QOS}
  SIO_TRANSLATE_HANDLE = IOC_INOUT or IOC_WS2 or 13; {$EXTERNALSYM SIO_TRANSLATE_HANDLE}
  SIO_ROUTING_INTERFACE_QUERY = IOC_INOUT or IOC_WS2 or 20; {$EXTERNALSYM SIO_ROUTING_INTERFACE_QUERY}
  SIO_ROUTING_INTERFACE_CHANGE = IOC_INOUT or IOC_WS2 or 21; {$EXTERNALSYM SIO_ROUTING_INTERFACE_CHANGE}
  SIO_ADDRESS_LIST_QUERY = IOC_OUT or IOC_WS2 or 22; {$EXTERNALSYM SIO_ADDRESS_LIST_QUERY}
  SIO_ADDRESS_LIST_CHANGE = IOC_VOID or IOC_WS2 or 23; {$EXTERNALSYM SIO_ADDRESS_LIST_CHANGE}
  SIO_QUERY_TARGET_PNP_HANDLE = IOC_OUT or IOC_WS2 or 24;  {$EXTERNALSYM SIO_QUERY_TARGET_PNP_HANDLE}
  SIO_ADDRESS_LIST_SORT = IOC_INOUT or IOC_WS2 or 25; {$EXTERNALSYM SIO_ADDRESS_LIST_SORT}

type
  LPCONDITIONPROC = function(lpCallerId, lpCallerData: PWsaBuf; lpSQOS, lpGQOS: PQualityOfService;
    lpCalleeId, lpCalleeData: PWsaBuf; g: PGROUP; dwCallbackData: LongWord): Integer; stdcall;
  LPWSAOVERLAPPED_COMPLETION_ROUTINE = procedure(dwError, cbTransferred: DWORD; lpOverlapped: PWSAOVERLAPPED;
    dwFlags: DWORD); stdcall;

const
  SIO_NSP_NOTIFY_CHANGE = IOC_IN or IOC_WS2 or 25;  {$EXTERNALSYM SIO_NSP_NOTIFY_CHANGE}

type
  _WSACOMPLETIONTYPE = (NSP_NOTIFY_IMMEDIATELY, NSP_NOTIFY_HWND, NSP_NOTIFY_EVENT, NSP_NOTIFY_PORT, NSP_NOTIFY_APC);

  WSACOMPLETIONTYPE = _WSACOMPLETIONTYPE;
  PWSACOMPLETIONTYPE = ^WSACOMPLETIONTYPE;
  LPWSACOMPLETIONTYPE = ^WSACOMPLETIONTYPE;
  TWsaCompletionType = WSACOMPLETIONTYPE;

  _WSACOMPLETION = record
    Type_: WSACOMPLETIONTYPE;
    case Integer of
      0:
        (hWnd: HWND;
          uMsg: UINT;
          context: WPARAM);
      (* TODO
        1: (
        lpOverlapped: PWsaOverlapped);
        2: (
        lpOverlapped: PWsaOverlapped;
        lpfnCompletionProc: LPWSAOVERLAPPED_COMPLETION_ROUTINE);
        *)
      3:
        (lpOverlapped: PWSAOVERLAPPED;
          hPort: THANDLE;
          Key: LongWord);
  end;

  WSACOMPLETION = _WSACOMPLETION;
  PWSACOMPLETION = ^WSACOMPLETION;
  LPWSACOMPLETION = ^WSACOMPLETION;
  TWsaCompletion = WSACOMPLETION;

const
  TH_NETDEV = $00000001; {$EXTERNALSYM TH_NETDEV}
  TH_TAPI = $00000002; {$EXTERNALSYM TH_TAPI}

type
  LPSOCKADDR = ^sockaddr;
  PSOCKADDR_STORAGE = ^sockaddr_storage;
  LPSOCKADDR_STORAGE = ^sockaddr_storage;

  _BLOB = record
    cbSize: ULONG;
    pBlobData: PBYTE;
  end;

  BLOB = _BLOB;
  LPBLOB = ^BLOB;
  TBlob = BLOB;
  PBlob = LPBLOB;

const
  SERVICE_MULTIPLE = $00000001; {$EXTERNALSYM SERVICE_MULTIPLE}
  NS_ALL = 0; {$EXTERNALSYM NS_ALL}
  NS_SAP = 1; {$EXTERNALSYM NS_SAP}
  NS_NDS = 2; {$EXTERNALSYM NS_NDS}
  NS_PEER_BROWSE = 3; {$EXTERNALSYM NS_PEER_BROWSE}
  NS_SLP = 5; {$EXTERNALSYM NS_SLP}
  NS_DHCP = 6; {$EXTERNALSYM NS_DHCP}
  NS_TCPIP_LOCAL = 10; {$EXTERNALSYM NS_TCPIP_LOCAL}
  NS_TCPIP_HOSTS = 11; {$EXTERNALSYM NS_TCPIP_HOSTS}
  NS_DNS = 12; {$EXTERNALSYM NS_DNS}
  NS_NETBT = 13; {$EXTERNALSYM NS_NETBT}
  NS_WINS = 14; {$EXTERNALSYM NS_WINS}
  NS_NLA = 15; {$EXTERNALSYM NS_NLA}
  NS_NBP = 20; {$EXTERNALSYM NS_NBP}
  NS_MS = 30; {$EXTERNALSYM NS_MS}
  NS_STDA = 31; {$EXTERNALSYM NS_STDA}
  NS_NTDS = 32; {$EXTERNALSYM NS_NTDS}
  NS_X500 = 40; {$EXTERNALSYM NS_X500}
  NS_NIS = 41; {$EXTERNALSYM NS_NIS}
  NS_NISPLUS = 42; {$EXTERNALSYM NS_NISPLUS}
  NS_WRQ = 50; {$EXTERNALSYM NS_WRQ}
  NS_NETDES = 60; {$EXTERNALSYM NS_NETDES}
  RES_UNUSED_1 = $00000001; {$EXTERNALSYM RES_UNUSED_1}
  RES_FLUSH_CACHE = $00000002; {$EXTERNALSYM RES_FLUSH_CACHE}
  RES_SERVICE = $00000004; {$EXTERNALSYM RES_SERVICE}
  SERVICE_TYPE_VALUE_IPXPORTA = 'IpxSocket'; {$EXTERNALSYM SERVICE_TYPE_VALUE_IPXPORTA}
  SERVICE_TYPE_VALUE_IPXPORTW = WideString('IpxSocket');  {$EXTERNALSYM SERVICE_TYPE_VALUE_IPXPORTW}
  SERVICE_TYPE_VALUE_SAPIDA = 'SapId'; {$EXTERNALSYM SERVICE_TYPE_VALUE_SAPIDA}
  SERVICE_TYPE_VALUE_SAPIDW = WideString('SapId'); {$EXTERNALSYM SERVICE_TYPE_VALUE_SAPIDW}
  SERVICE_TYPE_VALUE_TCPPORTA = 'TcpPort'; {$EXTERNALSYM SERVICE_TYPE_VALUE_TCPPORTA}
  SERVICE_TYPE_VALUE_TCPPORTW = WideString('TcpPort'); {$EXTERNALSYM SERVICE_TYPE_VALUE_TCPPORTW}
  SERVICE_TYPE_VALUE_UDPPORTA = 'UdpPort'; {$EXTERNALSYM SERVICE_TYPE_VALUE_UDPPORTA}
  SERVICE_TYPE_VALUE_UDPPORTW = WideString('UdpPort'); {$EXTERNALSYM SERVICE_TYPE_VALUE_UDPPORTW}
  SERVICE_TYPE_VALUE_OBJECTIDA = 'ObjectId'; {$EXTERNALSYM SERVICE_TYPE_VALUE_OBJECTIDA}
  SERVICE_TYPE_VALUE_OBJECTIDW = WideString('ObjectId'); {$EXTERNALSYM SERVICE_TYPE_VALUE_OBJECTIDW}
  {$EXTERNALSYM SERVICE_TYPE_VALUE_SAPID}
  {$EXTERNALSYM SERVICE_TYPE_VALUE_TCPPORT}
  {$EXTERNALSYM SERVICE_TYPE_VALUE_UDPPORT}
  {$EXTERNALSYM SERVICE_TYPE_VALUE_OBJECTID}
{$IFDEF UNICODE}
  SERVICE_TYPE_VALUE_SAPID = SERVICE_TYPE_VALUE_SAPIDW;
  SERVICE_TYPE_VALUE_TCPPORT = SERVICE_TYPE_VALUE_TCPPORTW;
  SERVICE_TYPE_VALUE_UDPPORT = SERVICE_TYPE_VALUE_UDPPORTW;
  SERVICE_TYPE_VALUE_OBJECTID = SERVICE_TYPE_VALUE_OBJECTIDW;
{$ELSE}
  SERVICE_TYPE_VALUE_SAPID = SERVICE_TYPE_VALUE_SAPIDA;
  SERVICE_TYPE_VALUE_TCPPORT = SERVICE_TYPE_VALUE_TCPPORTA;
  SERVICE_TYPE_VALUE_UDPPORT = SERVICE_TYPE_VALUE_UDPPORTA;
  SERVICE_TYPE_VALUE_OBJECTID = SERVICE_TYPE_VALUE_OBJECTIDA;
{$ENDIF UNICODE}

type
  LPSOCKET_ADDRESS = ^SOCKET_ADDRESS;
  PSOCKET_ADDRESS = ^SOCKET_ADDRESS;

  _SOCKET_ADDRESS = record
    lpSockaddr: LPSOCKADDR;
    iSockaddrLength: Integer;
  end;

  SOCKET_ADDRESS = _SOCKET_ADDRESS;
  TSocketAddress = SOCKET_ADDRESS;
  PSocketAddress = PSOCKET_ADDRESS;

  LPCSADDR_INFO = ^CSADDR_INFO;
  PCSADDR_INFO = ^CSADDR_INFO;

  _CSADDR_INFO = record
    LocalAddr: SOCKET_ADDRESS;
    RemoteAddr: SOCKET_ADDRESS;
    iSocketType: Integer;
    iProtocol: Integer;
  end;

  CSADDR_INFO = _CSADDR_INFO;
  TCsAddrInfo = CSADDR_INFO;
  PCsAddrInfo = PCSADDR_INFO;

  LPSOCKET_ADDRESS_LIST = ^SOCKET_ADDRESS_LIST;

  _SOCKET_ADDRESS_LIST = record
    iAddressCount: Integer;
    Address: array [0 .. 0] of SOCKET_ADDRESS;
  end;

  SOCKET_ADDRESS_LIST = _SOCKET_ADDRESS_LIST;
  TSocketAddressList = SOCKET_ADDRESS_LIST;
  PSocketAddressList = LPSOCKET_ADDRESS_LIST;

  LPAFPROTOCOLS = ^AFPROTOCOLS;
  PAFPROTOCOLS = ^AFPROTOCOLS;

  _AFPROTOCOLS = record
    iAddressFamily: Integer;
    iProtocol: Integer;
  end;

  AFPROTOCOLS = _AFPROTOCOLS;
  TAfProtocols = AFPROTOCOLS;

  _WSAEcomparator = (COMP_EQUAL, COMP_NOTLESS);
  WSAECOMPARATOR = _WSAEcomparator;
  PWSAECOMPARATOR = ^WSAECOMPARATOR;
  LPWSAECOMPARATOR = ^WSAECOMPARATOR;

  LPWSAVERSION = ^WSAVERSION;
  PWSAVERSION = ^WSAVERSION;

  _WSAVersion = record
    dwVersion: DWORD;
    ecHow: WSAECOMPARATOR;
  end;

  WSAVERSION = _WSAVersion;
  TWsaVersion = WSAVERSION;

  _WSAQuerySetA = record
    dwSize: DWORD;
    lpszServiceInstanceName: LPSTR;
    lpServiceClassId: PGUID;
    lpVersion: LPWSAVERSION;
    lpszComment: LPSTR;
    dwNameSpace: DWORD;
    lpNSProviderId: PGUID;
    lpszContext: LPSTR;
    dwNumberOfProtocols: DWORD;
    lpafpProtocols: LPAFPROTOCOLS;
    lpszQueryString: LPSTR;
    dwNumberOfCsAddrs: DWORD;
    lpcsaBuffer: LPCSADDR_INFO;
    dwOutputFlags: DWORD;
    lpBlob: LPBLOB;
  end;

  WSAQUERYSETA = _WSAQuerySetA;
  PWSAQUERYSETA = ^WSAQUERYSETA;
  LPWSAQUERYSETA = ^WSAQUERYSETA;
  TWsaQuerySetA = WSAQUERYSETA;

  _WSAQuerySetW = record
    dwSize: DWORD;
    lpszServiceInstanceName: LPWSTR;
    lpServiceClassId: PGUID;
    lpVersion: LPWSAVERSION;
    lpszComment: LPWSTR;
    dwNameSpace: DWORD;
    lpNSProviderId: PGUID;
    lpszContext: LPWSTR;
    dwNumberOfProtocols: DWORD;
    lpafpProtocols: LPAFPROTOCOLS;
    lpszQueryString: LPWSTR;
    dwNumberOfCsAddrs: DWORD;
    lpcsaBuffer: LPCSADDR_INFO;
    dwOutputFlags: DWORD;
    lpBlob: LPBLOB;
  end;

  WSAQUERYSETW = _WSAQuerySetW;
  PWSAQUERYSETW = ^WSAQUERYSETW;
  LPWSAQUERYSETW = ^WSAQUERYSETW;
  TWsaQuerySetW = WSAQUERYSETW;
{$IFDEF UNICODE}
  WSAQUERYSET = WSAQUERYSETW;
  PWSAQUERYSET = PWSAQUERYSETW;
  LPWSAQUERYSET = LPWSAQUERYSETW;
  TWsaQuerySet = TWsaQuerySetW;
{$ELSE}
  WSAQUERYSET = WSAQUERYSETA;
  PWSAQUERYSET = PWSAQUERYSETA;
  LPWSAQUERYSET = LPWSAQUERYSETA;
  TWsaQuerySet = TWsaQuerySetA;
{$ENDIF UNICODE}

const
  LUP_DEEP = $0001; {$EXTERNALSYM LUP_DEEP}
  LUP_CONTAINERS = $0002; {$EXTERNALSYM LUP_CONTAINERS}
  LUP_NOCONTAINERS = $0004; {$EXTERNALSYM LUP_NOCONTAINERS}
  LUP_NEAREST = $0008; {$EXTERNALSYM LUP_NEAREST}
  LUP_RETURN_NAME = $0010; {$EXTERNALSYM LUP_RETURN_NAME}
  LUP_RETURN_TYPE = $0020; {$EXTERNALSYM LUP_RETURN_TYPE}
  LUP_RETURN_VERSION = $0040; {$EXTERNALSYM LUP_RETURN_VERSION}
  LUP_RETURN_COMMENT = $0080; {$EXTERNALSYM LUP_RETURN_COMMENT}
  LUP_RETURN_ADDR = $0100; {$EXTERNALSYM LUP_RETURN_ADDR}
  LUP_RETURN_BLOB = $0200; {$EXTERNALSYM LUP_RETURN_BLOB}
  LUP_RETURN_ALIASES = $0400; {$EXTERNALSYM LUP_RETURN_ALIASES}
  LUP_RETURN_QUERY_STRING = $0800; {$EXTERNALSYM LUP_RETURN_QUERY_STRING}
  LUP_RETURN_ALL = $0FF0; {$EXTERNALSYM LUP_RETURN_ALL}
  LUP_RES_SERVICE = $8000; {$EXTERNALSYM LUP_RES_SERVICE}
  LUP_FLUSHCACHE = $1000; {$EXTERNALSYM LUP_FLUSHCACHE}
  LUP_FLUSHPREVIOUS = $2000; {$EXTERNALSYM LUP_FLUSHPREVIOUS}
  RESULT_IS_ALIAS = $0001; {$EXTERNALSYM RESULT_IS_ALIAS}
  RESULT_IS_ADDED = $0010; {$EXTERNALSYM RESULT_IS_ADDED}
  RESULT_IS_CHANGED = $0020; {$EXTERNALSYM RESULT_IS_CHANGED}
  RESULT_IS_DELETED = $0040; {$EXTERNALSYM RESULT_IS_DELETED}

type
  _WSAESETSERVICEOP = (RNRSERVICE_REGISTER, RNRSERVICE_DEREGISTER, RNRSERVICE_DELETE);
  WSAESETSERVICEOP = _WSAESETSERVICEOP;
  PWSAESETSERVICEOP = ^WSAESETSERVICEOP;
  LPWSAESETSERVICEOP = ^WSAESETSERVICEOP;

  _WSANSClassInfoA = record
    lpszName: LPSTR;
    dwNameSpace: DWORD;
    dwValueType: DWORD;
    dwValueSize: DWORD;
    lpValue: Pointer;
  end;

  WSANSCLASSINFOA = _WSANSClassInfoA;
  PWSANSCLASSINFOA = ^WSANSCLASSINFOA;
  LPWSANSCLASSINFOA = ^WSANSCLASSINFOA;
  TWsaNsClassInfoA = WSANSCLASSINFOA;

  _WSANSClassInfoW = record
    lpszName: LPWSTR;
    dwNameSpace: DWORD;
    dwValueType: DWORD;
    dwValueSize: DWORD;
    lpValue: Pointer;
  end;

  WSANSCLASSINFOW = _WSANSClassInfoW;
  PWSANSCLASSINFOW = ^WSANSCLASSINFOW;
  LPWSANSCLASSINFOW = ^WSANSCLASSINFOW;
  TWsaNsClassInfoW = WSANSCLASSINFOW;
{$IFDEF UNICODE}
  WSANSCLASSINFO = WSANSCLASSINFOW;
  PWSANSCLASSINFO = PWSANSCLASSINFOW;
  LPWSANSCLASSINFO = LPWSANSCLASSINFOW;
  TWsaNsClassInfo = TWsaNsClassInfoW;
{$ELSE}
  WSANSCLASSINFO = WSANSCLASSINFOA;
  PWSANSCLASSINFO = PWSANSCLASSINFOA;
  LPWSANSCLASSINFO = LPWSANSCLASSINFOA;
  TWsaNsClassInfo = TWsaNsClassInfoA;
{$ENDIF UNICODE}

  _WSAServiceClassInfoA = record
    lpServiceClassId: PGUID;
    lpszServiceClassName: LPSTR;
    dwCount: DWORD;
    lpClassInfos: LPWSANSCLASSINFOA;
  end;

  WSASERVICECLASSINFOA = _WSAServiceClassInfoA;
  PWSASERVICECLASSINFOA = ^WSASERVICECLASSINFOA;
  LPWSASERVICECLASSINFOA = ^WSASERVICECLASSINFOA;
  TWsaServiceClassInfoA = WSASERVICECLASSINFOA;

  _WSAServiceClassInfoW = record
    lpServiceClassId: PGUID;
    lpszServiceClassName: LPWSTR;
    dwCount: DWORD;
    lpClassInfos: LPWSANSCLASSINFOW;
  end;

  WSASERVICECLASSINFOW = _WSAServiceClassInfoW;
  PWSASERVICECLASSINFOW = ^WSASERVICECLASSINFOW;
  LPWSASERVICECLASSINFOW = ^WSASERVICECLASSINFOW;
  TWsaServiceClassInfoW = WSASERVICECLASSINFOW;
{$IFDEF UNICODE}
  WSASERVICECLASSINFO = WSASERVICECLASSINFOW;
  PWSASERVICECLASSINFO = PWSASERVICECLASSINFOW;
  LPWSASERVICECLASSINFO = LPWSASERVICECLASSINFOW;
  TWsaServiceClassInfo = TWsaServiceClassInfoW;
{$ELSE}
  WSASERVICECLASSINFO = WSASERVICECLASSINFOA;
  PWSASERVICECLASSINFO = PWSASERVICECLASSINFOA;
  LPWSASERVICECLASSINFO = LPWSASERVICECLASSINFOA;
  TWsaServiceClassInfo = TWsaServiceClassInfoA;
{$ENDIF UNICODE}
  LPWSANAMESPACE_INFOA = ^WSANAMESPACE_INFOA;
  PWSANAMESPACE_INFOA = ^WSANAMESPACE_INFOA;

  _WSANAMESPACE_INFOA = record
    NSProviderId: TGUID;
    dwNameSpace: DWORD;
    fActive: BOOL;
    dwVersion: DWORD;
    lpszIdentifier: LPSTR;
  end;

  WSANAMESPACE_INFOA = _WSANAMESPACE_INFOA;
  TWsaNameSpaceInfoA = WSANAMESPACE_INFOA;
  PWsaNameSpaceInfoA = LPWSANAMESPACE_INFOA;

  LPWSANAMESPACE_INFOW = ^WSANAMESPACE_INFOW;
  PWSANAMESPACE_INFOW = ^WSANAMESPACE_INFOW;

  _WSANAMESPACE_INFOW = record
    NSProviderId: TGUID;
    dwNameSpace: DWORD;
    fActive: BOOL;
    dwVersion: DWORD;
    lpszIdentifier: LPWSTR;
  end;

  WSANAMESPACE_INFOW = _WSANAMESPACE_INFOW;
  TWsaNameSpaceInfoW = WSANAMESPACE_INFOW;
  PWsaNameSpaceInfoW = PWSANAMESPACE_INFOW;
{$IFDEF UNICODE}
  WSANAMESPACE_INFO = WSANAMESPACE_INFOW;
  PWSANAMESPACE_INFO = PWSANAMESPACE_INFOW;
  LPWSANAMESPACE_INFO = LPWSANAMESPACE_INFOW;
  TWsaNameSpaceInfo = TWsaNameSpaceInfoW;
  PWsaNameSpaceInfo = PWsaNameSpaceInfoW;
{$ELSE}
  WSANAMESPACE_INFO = WSANAMESPACE_INFOA;
  PWSANAMESPACE_INFO = PWSANAMESPACE_INFOA;
  LPWSANAMESPACE_INFO = LPWSANAMESPACE_INFOA;
  TWsaNameSpaceInfo = TWsaNameSpaceInfoA;
  PWsaNameSpaceInfo = PWsaNameSpaceInfoA;
{$ENDIF UNICODE}
function accept(s: TSocketId; addr: PSockAddr; addrlen: PINT): TSocketId; stdcall; {$EXTERNALSYM accept}
function bind(s: TSocketId; name: PSockAddr; namelen: Integer): Integer; stdcall; {$EXTERNALSYM bind}
function closesocket(s: TSocketId): Integer; stdcall; {$EXTERNALSYM closesocket}
function connect(s: TSocketId; name: PSockAddr; namelen: Integer): Integer; stdcall; {$EXTERNALSYM connect}
function ioctlsocket(s: TSocketId; cmd: UInt32; var argp: UInt32): Integer; stdcall;  {$EXTERNALSYM ioctlsocket}
function getpeername(s: TSocketId; name: PSockAddr; var namelen: Integer): Integer; stdcall; {$EXTERNALSYM getpeername}
function getsockname(s: TSocketId; name: PSockAddr; var namelen: Integer): Integer; stdcall; {$EXTERNALSYM getsockname}
function getsockopt(s: TSocketId; level, optname: Integer; optval: PAnsiChar; var optlen: Integer): Integer; stdcall; {$EXTERNALSYM getsockopt}
function htonl(hostlong: UInt32): UInt32; stdcall; {$EXTERNALSYM htonl}
function htons(hostshort: Word): Word; stdcall; {$EXTERNALSYM htons}
function inet_addr(cp: PAnsiChar): UInt32; stdcall; {$EXTERNALSYM inet_addr}
function inet_ntoa(inaddr: in_addr): PAnsiChar; stdcall; {$EXTERNALSYM inet_ntoa}
function listen(s: TSocketId; backlog: Integer): Integer; stdcall; {$EXTERNALSYM listen}
function ntohl(netlong: UInt32): UInt32; stdcall; {$EXTERNALSYM ntohl}
function ntohs(netshort: Word): Word; stdcall; {$EXTERNALSYM ntohs}
function recv(s: TSocketId; var buf; len, flags: Integer): Integer; stdcall; {$EXTERNALSYM recv}
function recvfrom(s: TSocketId; var buf; len, flags: Integer; from: PSockAddr;
  var fromlen: Integer): Integer; stdcall; {$EXTERNALSYM recvfrom}
function select(nfds: Integer; readfds, writefds, exceptfds: PFdSet;
  timeout: PTimeVal): Integer; stdcall; {$EXTERNALSYM select}
function send(s: TSocketId; const buf; len, flags: Integer): Integer; stdcall; {$EXTERNALSYM send}
function sendto(s: TSocketId; const buf; len, flags: Integer;
  toaddr: PSockAddr; tolen: Integer): Integer; stdcall; {$EXTERNALSYM sendto}
function setsockopt(s: TSocketId; level, optname: UInt32; optval: PAnsiChar;
  optlen: Integer): Integer; stdcall; {$EXTERNALSYM setsockopt}
function shutdown(s: TSocketId; how: Integer): Integer; stdcall; {$EXTERNALSYM shutdown}
function socket(af, type_, protocol: Integer): TSocketId; stdcall; {$EXTERNALSYM socket}
function gethostbyaddr(addr: PAnsiChar; len, type_: Integer): PHostEnt; stdcall; {$EXTERNALSYM gethostbyaddr}
function gethostbyname(name: PAnsiChar): PHostEnt; stdcall; {$EXTERNALSYM gethostbyname}
function gethostname(name: PAnsiChar; namelen: Integer): Integer; stdcall; {$EXTERNALSYM gethostname}
function getservbyport(port: Integer; proto: PAnsiChar): PServEnt; stdcall; {$EXTERNALSYM getservbyport}
function getservbyname(name, proto: PAnsiChar): PServEnt; stdcall; {$EXTERNALSYM getservbyname}
function getprotobynumber(number: Integer): PProtoEnt; stdcall; {$EXTERNALSYM getprotobynumber}
function getprotobyname(name: PAnsiChar): PProtoEnt; stdcall; {$EXTERNALSYM getprotobyname}
function WSAStartup(wVersionRequired: WORD; var lpWSAData: TWSAData): Integer; stdcall; {$EXTERNALSYM WSAStartup}
function WSACleanup: Integer; stdcall; {$EXTERNALSYM WSACleanup}
procedure WSASetLastError(iError: Integer); stdcall; {$EXTERNALSYM WSASetLastError}
function WSAGetLastError: Integer; stdcall; {$EXTERNALSYM WSAGetLastError}
function WSAIsBlocking: BOOL; stdcall; {$EXTERNALSYM WSAIsBlocking}
function WSAUnhookBlockingHook: Integer; stdcall; {$EXTERNALSYM WSAUnhookBlockingHook}
function WSASetBlockingHook(lpBlockFunc: FARPROC): FARPROC; stdcall; {$EXTERNALSYM WSASetBlockingHook}
function WSACancelBlockingCall: Integer; stdcall; {$EXTERNALSYM WSACancelBlockingCall}
function WSAAsyncGetServByName(hWnd: HWND; wMsg: UInt32; name, proto, buf: PAnsiChar;
  buflen: Integer): THANDLE; stdcall; {$EXTERNALSYM WSAAsyncGetServByName}
function WSAAsyncGetServByPort(hWnd: HWND; wMsg: UInt32; port: Integer; proto, buf: PAnsiChar;
  buflen: Integer): THandle; stdcall; {$EXTERNALSYM WSAAsyncGetServByPort}
function WSAAsyncGetProtoByName(hWnd: HWND; wMsg: UInt32; name, buf: PAnsiChar;
  buflen: Integer): THandle; stdcall; {$EXTERNALSYM WSAAsyncGetProtoByName}
function WSAAsyncGetProtoByNumber(hWnd: HWND; wMsg: UInt32; number: Integer; buf: PAnsiChar;
  buflen: Integer): THandle; stdcall; {$EXTERNALSYM WSAAsyncGetProtoByNumber}
function WSAAsyncGetHostByName(hWnd: HWND; wMsg: UInt32; name, buf: PAnsiChar;
  buflen: Integer): THandle; stdcall; {$EXTERNALSYM WSAAsyncGetHostByName}
function WSAAsyncGetHostByAddr(hWnd: HWND; wMsg: UInt32; addr: PAnsiChar; len, type_: Integer;
  buf: PAnsiChar; buflen: Integer): THandle; stdcall; {$EXTERNALSYM WSAAsyncGetHostByAddr}
function WSACancelAsyncRequest(hAsyncTaskHandle: THandle): Integer; stdcall; {$EXTERNALSYM WSACancelAsyncRequest}
function WSAAsyncSelect(s: TSocketId; hWnd: HWND; wMsg: UInt32;
  lEvent: Longint): Integer; stdcall; {$EXTERNALSYM WSAAsyncSelect}
function WSAAccept(s: TSocketId; addr: PSockAddr; addrlen: PINT; lpfnCondition: LPCONDITIONPROC;
  dwCallbackData: DWORD): TSocketId; stdcall; {$EXTERNALSYM WSAAccept}
function WSACloseEvent(hEvent: TWsaEvent): BOOL; stdcall;{$EXTERNALSYM WSACloseEvent}
function WSAConnect(s: TSocketId; name: PSockAddr; namelen: Integer; lpCallerData: PWSABUF;
  lpCalleeData: PWSABUF; lpSQOS: PQualityOfService;
  lpGQOS: PQualityOfService): Integer; stdcall; {$EXTERNALSYM WSAConnect}
function WSACreateEvent: TWsaEvent; stdcall; {$EXTERNALSYM WSACreateEvent}
function WSADuplicateSocketA(s: TSocketId; dwProcessId: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFOA): Integer;
  stdcall; {$EXTERNALSYM WSADuplicateSocketA}
function WSADuplicateSocketW(s: TSocketId; dwProcessId: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFOW): Integer;
  stdcall; {$EXTERNALSYM WSADuplicateSocketW}
function WSADuplicateSocket(s: TSocketId; dwProcessId: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFO): Integer;
  stdcall; {$EXTERNALSYM WSADuplicateSocket}
function WSAEnumNetworkEvents(s: TSocketId; hEventObject: TWsaEvent; lpNetworkEvents: LPWSANETWORKEVENTS): Integer;
  stdcall; {$EXTERNALSYM WSAEnumNetworkEvents}
function WSAEnumProtocolsA(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFOA;
  var lpdwBufferLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAEnumProtocolsA}
function WSAEnumProtocolsW(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFOW;
var lpdwBufferLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAEnumProtocolsW}
function WSAEnumProtocols(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFO;
  var lpdwBufferLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAEnumProtocols}
function WSAEventSelect(s: TSocketId; hEventObject: TWsaEvent; lNetworkEvents: Longint): Integer; stdcall; {$EXTERNALSYM WSAEventSelect}
function WSAGetOverlappedResult(s: TSocketId; lpOverlapped: PWsaOverlapped; var lpcbTransfer: DWORD; fWait: BOOL;
  var lpdwFlags: DWORD): BOOL; stdcall;  {$EXTERNALSYM WSAGetOverlappedResult}
function WSAGetQOSByName(s: TSocketId; var lpQOSName: TWsaBuf; PQualityOfService: PQualityOfService): BOOL;
  stdcall; {$EXTERNALSYM WSAGetQOSByName}
function WSAHtonl(s: TSocketId; hostlong: UInt32; var lpnetlong: UInt32): Integer; stdcall; {$EXTERNALSYM WSAHtonl}
function WSAHtons(s: TSocketId; hostshort: Word; var lpnetshort: Word): Integer; stdcall; {$EXTERNALSYM WSAHtons}
function WSAIoctl(s: TSocketId; dwIoControlCode: DWORD; lpvInBuffer: Pointer; cbInBuffer: DWORD; lpvOutBuffer: Pointer;
  cbOutBuffer: DWORD; lpcbBytesReturned: PDWORD; lpOverlapped: PWsaOverlapped;
  lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall; {$EXTERNALSYM WSAIoctl}
function WSAJoinLeaf(s: TSocketId; name: PSockAddr; namelen: Integer; lpCallerData: PWsaBuf; lpCalleeData: PWsaBuf;
  lpSQOS, lpGQOS: PQualityOfService; dwFlags: DWORD): TSocketId; stdcall; {$EXTERNALSYM WSAJoinLeaf}
function WSANtohl(s: TSocketId; netlong: UInt32; var lphostlong: UInt32): Integer; stdcall; {$EXTERNALSYM WSANtohl}
function WSANtohs(s: TSocketId; netshort: Word; var lphostshort: Word): Integer; stdcall; {$EXTERNALSYM WSANtohs}
function WSARecv(s: TSocketId; lpBuffers: PWsaBuf; dwBufferCount: DWORD; var lpNumberOfBytesRecvd, lpFlags: DWORD;
  lpOverlapped: PWsaOverlapped; lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall; {$EXTERNALSYM WSARecv}
function WSARecvDisconnect(s: TSocketId; lpInboundDisconnectData: PWsaBuf): Integer; stdcall; {$EXTERNALSYM WSARecvDisconnect}
function WSARecvFrom(s: TSocketId; lpBuffers: PWsaBuf; dwBufferCount: DWORD; var lpNumberOfBytesRecvd, lpFlags: DWORD;
  lpFrom: PSockAddr; lpFromlen: PINT; lpOverlapped: PWsaOverlapped;
  lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall; {$EXTERNALSYM WSARecvFrom}
function WSAResetEvent(hEvent: TWsaEvent): BOOL; stdcall; {$EXTERNALSYM WSAResetEvent}
function WSASend(s: TSocketId; lpBuffers: PWsaBuf; dwBufferCount: DWORD; var lpNumberOfBytesSent: DWORD;
  dwFlags: DWORD; lpOverlapped: PWsaOverlapped; lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE)
  : Integer; stdcall; {$EXTERNALSYM WSASend}
function WSASendDisconnect(s: TSocketId; lpOutboundDisconnectData: PWsaBuf): Integer; stdcall; {$EXTERNALSYM WSASendDisconnect}
function WSASendTo(s: TSocketId; lpBuffers: PWsaBuf; dwBufferCount: DWORD; var lpNumberOfBytesSent: DWORD;
  dwFlags: DWORD; lpTo: PSockAddr; iTolen: Integer; lpOverlapped: PWsaOverlapped;
  lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall; {$EXTERNALSYM WSASendTo}
function WSASetEvent(hEvent: TWsaEvent): BOOL; stdcall; {$EXTERNALSYM WSASetEvent}
function WSASocketA(af, type_, protocol: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFOA; g: GROUP;
  dwFlags: DWORD): TSocketId; stdcall; {$EXTERNALSYM WSASocketA}
function WSASocketW(af, type_, protocol: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFOW; g: GROUP;
  dwFlags: DWORD): TSocketId; stdcall; {$EXTERNALSYM WSASocketW}
function WSASocket(af, type_, protocol: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFO; g: GROUP;
  dwFlags: DWORD): TSocketId; stdcall; {$EXTERNALSYM WSASocket}
function WSAWaitForMultipleEvents(cEvents: DWORD; lphEvents: PWSAEVENT; fWaitAll: BOOL; dwTimeout: DWORD;
  fAlertable: BOOL): DWORD; stdcall; {$EXTERNALSYM WSAWaitForMultipleEvents}
function WSAAddressToStringA(lpsaAddress: LPSOCKADDR; dwAddressLength: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFOA;
lpszAddressString: LPSTR; var lpdwAddressStringLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAAddressToStringA}
function WSAAddressToStringW(lpsaAddress: LPSOCKADDR; dwAddressLength: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFOW;
lpszAddressString: LPWSTR; var lpdwAddressStringLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAAddressToStringW}
function WSAAddressToString(lpsaAddress: LPSOCKADDR; dwAddressLength: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFO;
  lpszAddressString: LPTSTR; var lpdwAddressStringLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAAddressToString}
function WSAStringToAddressA(AddressString: LPSTR; AddressFamily: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFOA;
lpAddress: LPSOCKADDR; var lpAddressLength: Integer): Integer; stdcall; {$EXTERNALSYM WSAStringToAddressA}
function WSAStringToAddressW(AddressString: LPWSTR; AddressFamily: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFOW;
lpAddress: LPSOCKADDR; var lpAddressLength: Integer): Integer; stdcall; {$EXTERNALSYM WSAStringToAddressW}
function WSAStringToAddress(AddressString: LPTSTR; AddressFamily: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFO;
  lpAddress: LPSOCKADDR; var lpAddressLength: Integer): Integer; stdcall; {$EXTERNALSYM WSAStringToAddress}
function WSALookupServiceBeginA(lpqsRestrictions: LPWSAQUERYSETA; dwControlFlags: DWORD;
var lphLookup: THandle): Integer; stdcall; {$EXTERNALSYM WSALookupServiceBeginA}
function WSALookupServiceBeginW(lpqsRestrictions: LPWSAQUERYSETW; dwControlFlags: DWORD;
var lphLookup: THandle): Integer; stdcall; {$EXTERNALSYM WSALookupServiceBeginW}
function WSALookupServiceBegin(lpqsRestrictions: LPWSAQUERYSET; dwControlFlags: DWORD;
  var lphLookup: THandle): Integer; stdcall;  {$EXTERNALSYM WSALookupServiceBegin}
function WSALookupServiceNextA(hLookup: THandle; dwControlFlags: DWORD; var lpdwBufferLength: DWORD;
lpqsResults: LPWSAQUERYSETA): Integer; stdcall; {$EXTERNALSYM WSALookupServiceNextA}
function WSALookupServiceNextW(hLookup: THandle; dwControlFlags: DWORD; var lpdwBufferLength: DWORD;
lpqsResults: LPWSAQUERYSETW): Integer; stdcall; {$EXTERNALSYM WSALookupServiceNextW}
function WSALookupServiceNext(hLookup: THandle; dwControlFlags: DWORD; var lpdwBufferLength: DWORD;
  lpqsResults: LPWSAQUERYSET): Integer; stdcall; {$EXTERNALSYM WSALookupServiceNext}
function WSANSPIoctl(hLookup: THandle; dwControlCode: DWORD; lpvInBuffer: Pointer; cbInBuffer: DWORD;
  lpvOutBuffer: Pointer; cbOutBuffer: DWORD; lpcbBytesReturned: LPDWORD; lpCompletion: LPWSACOMPLETION): Integer;
  stdcall; {$EXTERNALSYM WSANSPIoctl}
function WSALookupServiceEnd(hLookup: THandle): Integer; stdcall; {$EXTERNALSYM WSALookupServiceEnd}
function WSAInstallServiceClassA(lpServiceClassInfo: LPWSASERVICECLASSINFOA): Integer; stdcall; {$EXTERNALSYM WSAInstallServiceClassA}
function WSAInstallServiceClassW(lpServiceClassInfo: LPWSASERVICECLASSINFOW): Integer; stdcall; {$EXTERNALSYM WSAInstallServiceClassW}
function WSAInstallServiceClass(lpServiceClassInfo: LPWSASERVICECLASSINFO): Integer; stdcall; {$EXTERNALSYM WSAInstallServiceClass}
function WSARemoveServiceClass(const lpServiceClassId: TGUID): Integer; stdcall; {$EXTERNALSYM WSARemoveServiceClass}
function WSAGetServiceClassInfoA(const lpProviderId, lpServiceClassId: TGUID; var lpdwBufSize: DWORD;
lpServiceClassInfo: LPWSASERVICECLASSINFOA): Integer; stdcall; {$EXTERNALSYM WSAGetServiceClassInfoA}
function WSAGetServiceClassInfoW(const lpProviderId, lpServiceClassId: TGUID; var lpdwBufSize: DWORD;
lpServiceClassInfo: LPWSASERVICECLASSINFOW): Integer; stdcall; {$EXTERNALSYM WSAGetServiceClassInfoW}
function WSAGetServiceClassInfo(const lpProviderId, lpServiceClassId: TGUID; var lpdwBufSize: DWORD;
  lpServiceClassInfo: LPWSASERVICECLASSINFO): Integer; stdcall; {$EXTERNALSYM WSAGetServiceClassInfo}
function WSAEnumNameSpaceProvidersA(var lpdwBufferLength: DWORD; lpnspBuffer: LPWSANAMESPACE_INFOA): Integer; stdcall; {$EXTERNALSYM WSAEnumNameSpaceProvidersA}
function WSAEnumNameSpaceProvidersW(var lpdwBufferLength: DWORD; lpnspBuffer: LPWSANAMESPACE_INFOW): Integer; stdcall; {$EXTERNALSYM WSAEnumNameSpaceProvidersW}
function WSAEnumNameSpaceProviders(var lpdwBufferLength: DWORD; lpnspBuffer: LPWSANAMESPACE_INFO): Integer; stdcall; {$EXTERNALSYM WSAEnumNameSpaceProviders}
function WSAGetServiceClassNameByClassIdA(const lpServiceClassId: TGUID; lpszServiceClassName: LPSTR;
  var lpdwBufferLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAGetServiceClassNameByClassIdA}
function WSAGetServiceClassNameByClassIdW(const lpServiceClassId: TGUID; lpszServiceClassName: LPWSTR;
  var lpdwBufferLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAGetServiceClassNameByClassIdW}
function WSAGetServiceClassNameByClassId(const lpServiceClassId: TGUID; lpszServiceClassName: LPTSTR;
  var lpdwBufferLength: DWORD): Integer; stdcall; {$EXTERNALSYM WSAGetServiceClassNameByClassId}
function WSASetServiceA(lpqsRegInfo: LPWSAQUERYSETA; essoperation: WSAESETSERVICEOP; dwControlFlags: DWORD): Integer;
  stdcall; {$EXTERNALSYM WSASetServiceA}
function WSASetServiceW(lpqsRegInfo: LPWSAQUERYSETW; essoperation: WSAESETSERVICEOP; dwControlFlags: DWORD): Integer;
  stdcall; {$EXTERNALSYM WSASetServiceW}
function WSASetService(lpqsRegInfo: LPWSAQUERYSET; essoperation: WSAESETSERVICEOP; dwControlFlags: DWORD): Integer;
  stdcall; {$EXTERNALSYM WSASetService}
function WSAProviderConfigChange(var lpNotificationHandle: THandle; lpOverlapped: PWsaOverlapped;
  lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall; {$EXTERNALSYM WSAProviderConfigChange}

function WSAMAKEASYNCREPLY(buflen, error: WORD): DWORD; {$EXTERNALSYM WSAMAKEASYNCREPLY}
function WSAMAKESELECTREPLY(event, error: WORD): DWORD; {$EXTERNALSYM WSAMAKESELECTREPLY}
function WSAGETASYNCBUFLEN(lParam: DWORD): WORD; {$EXTERNALSYM WSAGETASYNCBUFLEN}
function WSAGETASYNCERROR(lParam: DWORD): WORD; {$EXTERNALSYM WSAGETASYNCERROR}
function WSAGETSELECTEVENT(lParam: DWORD): WORD; {$EXTERNALSYM WSAGETSELECTEVENT}
function WSAGETSELECTERROR(lParam: DWORD): WORD; {$EXTERNALSYM WSAGETSELECTERROR}

implementation

const
  ws2_32 = 'ws2_32.dll';
{$IFDEF UNICODE}
  AWSuffix = 'W';
{$ELSE}
  AWSuffix = 'A';
{$ENDIF UNICODE}

function _IO(x, y: DWORD): DWORD;
begin
  Result := IOC_VOID or (x shl 8) or y;
end;

function _IOR(x, y, t: DWORD): DWORD;
begin
  Result := IOC_OUT or ((T and IOCPARM_MASK) shl 16) or (x shl 8) or y;
end;

function _IOW(x, y, t: DWORD): DWORD;
begin
  Result := DWORD(IOC_IN or ((T and IOCPARM_MASK) shl 16) or (x shl 8) or y);
end;

function IN_CLASSA(i: DWORD): Boolean;
begin
  Result := i and DWORD($80000000) = 0;
end;

function IN_CLASSB(i: DWORD): Boolean;
begin
  Result := i and DWORD($C0000000) = DWORD($80000000);
end;

function IN_CLASSC(i: DWORD): Boolean;
begin
  Result := (i and DWORD($E0000000)) = DWORD($C0000000);
end;

function IN_CLASSD(i: DWORD): Boolean;
begin
  Result := (i and DWORD($F0000000)) = DWORD($E0000000);
end;

function IN_MULTICAST(i: DWORD): Boolean;
begin
  Result := IN_CLASSD(i);
end;

function h_errno: Integer;
begin
  Result := WSAGetLastError;
end;

function _WSAIO(x, y: DWORD): DWORD;
begin
  Result := IOC_VOID or x or y;
end;

function _WSAIOR(x, y: DWORD): DWORD;
begin
  Result := IOC_OUT or x or y;
end;

function _WSAIOW(x, y: DWORD): DWORD;
begin
  Result := IOC_IN or x or y;
end;

function _WSAIORW(x, y: DWORD): DWORD;
begin
  Result := IOC_INOUT or x or y;
end;

function WSAMAKEASYNCREPLY(buflen, error: WORD): DWORD;
begin
  Result := MAKELONG(buflen, error);
end;

function WSAMAKESELECTREPLY(event, error: WORD): DWORD;
begin
  Result := MAKELONG(event, error);
end;

function WSAGETASYNCBUFLEN(lParam: DWORD): WORD;
begin
  Result := LOWORD(lParam);
end;

function WSAGETASYNCERROR(lParam: DWORD): WORD;
begin
  Result := HIWORD(lParam);
end;

function WSAGETSELECTEVENT(lParam: DWORD): WORD;
begin
  Result := LOWORD(lParam);
end;

function WSAGETSELECTERROR(lParam: DWORD): WORD;
begin
  Result := HIWORD(lParam);
end;

function WS2_FDIsSet; external ws2_32 name '__WSAFDIsSet';
function accept; external ws2_32 name 'accept';
function bind; external ws2_32 name 'bind';
function closesocket; external ws2_32 name 'closesocket';
function connect; external ws2_32 name 'connect';
function ioctlsocket; external ws2_32 name 'ioctlsocket';
function getpeername; external ws2_32 name 'getpeername';
function getsockname; external ws2_32 name 'getsockname';
function getsockopt; external ws2_32 name 'getsockopt';
function htonl; external ws2_32 name 'htonl';
function htons; external ws2_32 name 'htons';
function inet_addr; external ws2_32 name 'inet_addr';
function inet_ntoa; external ws2_32 name 'inet_ntoa';
function listen; external ws2_32 name 'listen';
function ntohl; external ws2_32 name 'ntohl';
function ntohs; external ws2_32 name 'ntohs';
function recv; external ws2_32 name 'recv';
function recvfrom; external ws2_32 name 'recvfrom';
function select; external ws2_32 name 'select';
function send; external ws2_32 name 'send';
function sendto; external ws2_32 name 'sendto';
function setsockopt; external ws2_32 name 'setsockopt';
function shutdown; external ws2_32 name 'shutdown';
function socket; external ws2_32 name 'socket';
function gethostbyaddr; external ws2_32 name 'gethostbyaddr';
function gethostbyname; external ws2_32 name 'gethostbyname';
function gethostname; external ws2_32 name 'gethostname';
function getservbyport; external ws2_32 name 'getservbyport';
function getservbyname; external ws2_32 name 'getservbyname';
function getprotobynumber; external ws2_32 name 'getprotobynumber';
function getprotobyname; external ws2_32 name 'getprotobyname';
function WSAStartup; external ws2_32 name 'WSAStartup';
function WSACleanup; external ws2_32 name 'WSACleanup';
procedure WSASetLastError; external ws2_32 name 'WSASetLastError';
function WSAGetLastError; external ws2_32 name 'WSAGetLastError';
function WSAIsBlocking; external ws2_32 name 'WSAIsBlocking';
function WSAUnhookBlockingHook; external ws2_32 name 'WSAUnhookBlockingHook';
function WSASetBlockingHook; external ws2_32 name 'WSASetBlockingHook';
function WSACancelBlockingCall; external ws2_32 name 'WSACancelBlockingCall';
function WSAAsyncGetServByName; external ws2_32 name 'WSAAsyncGetServByName';
function WSAAsyncGetServByPort; external ws2_32 name 'WSAAsyncGetServByPort';
function WSAAsyncGetProtoByName; external ws2_32 name 'WSAAsyncGetProtoByName';
function WSAAsyncGetProtoByNumber; external ws2_32 name 'WSAAsyncGetProtoByNumber';
function WSAAsyncGetHostByName; external ws2_32 name 'WSAAsyncGetHostByName';
function WSAAsyncGetHostByAddr; external ws2_32 name 'WSAAsyncGetHostByAddr';
function WSACancelAsyncRequest; external ws2_32 name 'WSACancelAsyncRequest';
function WSAAsyncSelect; external ws2_32 name 'WSAAsyncSelect';
function WSAAccept; external ws2_32 name 'WSAAccept';
function WSACloseEvent; external ws2_32 name 'WSACloseEvent';
function WSAConnect; external ws2_32 name 'WSAConnect';
function WSACreateEvent; external ws2_32 name 'WSACreateEvent';
function WSADuplicateSocketA; external ws2_32 name 'WSADuplicateSocketA';
function WSADuplicateSocketW; external ws2_32 name 'WSADuplicateSocketW';
function WSADuplicateSocket; external ws2_32 name 'WSADuplicateSocket' + AWSuffix;
function WSAEnumNetworkEvents; external ws2_32 name 'WSAEnumNetworkEvents';
function WSAEnumProtocolsA; external ws2_32 name 'WSAEnumProtocolsA';
function WSAEnumProtocolsW; external ws2_32 name 'WSAEnumProtocolsW';
function WSAEnumProtocols; external ws2_32 name 'WSAEnumProtocols' + AWSuffix;
function WSAEventSelect; external ws2_32 name 'WSAEventSelect';
function WSAGetOverlappedResult; external ws2_32 name 'WSAGetOverlappedResult';
function WSAGetQOSByName; external ws2_32 name 'WSAGetQOSByName';
function WSAHtonl; external ws2_32 name 'WSAHtonl';
function WSAHtons; external ws2_32 name 'WSAHtons';
function WSAIoctl; external ws2_32 name 'WSAIoctl';
function WSAJoinLeaf; external ws2_32 name 'WSAJoinLeaf';
function WSANtohl; external ws2_32 name 'WSANtohl';
function WSANtohs; external ws2_32 name 'WSANtohs';
function WSARecv; external ws2_32 name 'WSARecv';
function WSARecvDisconnect; external ws2_32 name 'WSARecvDisconnect';
function WSARecvFrom; external ws2_32 name 'WSARecvFrom';
function WSAResetEvent; external ws2_32 name 'WSAResetEvent';
function WSASend; external ws2_32 name 'WSASend';
function WSASendDisconnect; external ws2_32 name 'WSASendDisconnect';
function WSASendTo; external ws2_32 name 'WSASendTo';
function WSASetEvent; external ws2_32 name 'WSASetEvent';
function WSASocketA; external ws2_32 name 'WSASocketA';
function WSASocketW; external ws2_32 name 'WSASocketW';
function WSASocket; external ws2_32 name 'WSASocket' + AWSuffix;
function WSAWaitForMultipleEvents; external ws2_32 name 'WSAWaitForMultipleEvents';
function WSAAddressToStringA; external ws2_32 name 'WSAAddressToStringA';
function WSAAddressToStringW; external ws2_32 name 'WSAAddressToStringW';
function WSAAddressToString; external ws2_32 name 'WSAAddressToString' + AWSuffix;
function WSAStringToAddressA; external ws2_32 name 'WSAStringToAddressA';
function WSAStringToAddressW; external ws2_32 name 'WSAStringToAddressW';
function WSAStringToAddress; external ws2_32 name 'WSAStringToAddress' + AWSuffix;
function WSALookupServiceBeginA; external ws2_32 name 'WSALookupServiceBeginA';
function WSALookupServiceBeginW; external ws2_32 name 'WSALookupServiceBeginW';
function WSALookupServiceBegin; external ws2_32 name 'WSALookupServiceBegin' + AWSuffix;
function WSALookupServiceNextA; external ws2_32 name 'WSALookupServiceNextA';
function WSALookupServiceNextW; external ws2_32 name 'WSALookupServiceNextW';
function WSALookupServiceNext; external ws2_32 name 'WSALookupServiceNext' + AWSuffix;
function WSANSPIoctl; external ws2_32 name 'WSANSPIoctl';
function WSALookupServiceEnd; external ws2_32 name 'WSALookupServiceEnd';
function WSAInstallServiceClassA; external ws2_32 name 'WSAInstallServiceClassA';
function WSAInstallServiceClassW; external ws2_32 name 'WSAInstallServiceClassW';
function WSAInstallServiceClass; external ws2_32 name 'WSAInstallServiceClass' + AWSuffix;
function WSARemoveServiceClass; external ws2_32 name 'WSARemoveServiceClass';
function WSAGetServiceClassInfoA; external ws2_32 name 'WSAGetServiceClassInfoA';
function WSAGetServiceClassInfoW; external ws2_32 name 'WSAGetServiceClassInfoW';
function WSAGetServiceClassInfo; external ws2_32 name 'WSAGetServiceClassInfo' + AWSuffix;
function WSAEnumNameSpaceProvidersA; external ws2_32 name 'WSAEnumNameSpaceProvidersA';
function WSAEnumNameSpaceProvidersW; external ws2_32 name 'WSAEnumNameSpaceProvidersW';
function WSAEnumNameSpaceProviders; external ws2_32 name 'WSAEnumNameSpaceProviders' + AWSuffix;
function WSAGetServiceClassNameByClassIdA; external ws2_32 name 'WSAGetServiceClassNameByClassIdA';
function WSAGetServiceClassNameByClassIdW; external ws2_32 name 'WSAGetServiceClassNameByClassIdW';
function WSAGetServiceClassNameByClassId; external ws2_32 name 'WSAGetServiceClassNameByClassId' + AWSuffix;
function WSASetServiceA; external ws2_32 name 'WSASetServiceA';
function WSASetServiceW; external ws2_32 name 'WSASetServiceW';
function WSASetService; external ws2_32 name 'WSASetService' + AWSuffix;
function WSAProviderConfigChange; external ws2_32 name 'WSAProviderConfigChange';

{ TFdSet }

procedure TFdSet.clear;
var
  I: Cardinal;
begin
  I := 0;
  while I < fd_count do
  begin
    if fd_array[I] = fd then
    begin
      while I < fd_count - 1 do
      begin
        fd_array[I] := fd_array[I + 1];
        Inc(I);
      end;
      fd_count := fd_count - 1;
      Break;
    end;
    Inc(I);
  end;
end;

function TFdSet.isset(fd: TSocketId): Boolean;
begin
  Result := WS2_FDIsSet(fd, Self) <> 0;
end;

procedure TFdSet.zero;
begin
  fd_count := 0;
end;

procedure TFdSet._set(fd: TSocketId);
var
  I: Cardinal;
begin
  I := 0;
  while I < fd_count do
  begin
    if fd_array[I] = fd then
      Break;
    Inc(I);
  end;
  if I = fd_count then
  begin
    if fd_count < FD_SETSIZE then
    begin
      fd_array[I] := fd;
      fd_count := fd_count + 1;
    end;
  end;
end;

{ TTimeVal }

procedure TTimeVal.clear;
begin
  tv_sec := 0;
  tv_usec := 0;
end;

function TTimeVal.isset: Boolean;
begin
  Result := (tv_sec <> 0) or (tv_usec <> 0);
end;

end.
