unit WinHttp;

interface

uses
  SysUtils, Classes, Windows;

const
  WinHttpDLL = 'winhttp.dll'; {$EXTERNALSYM WinHttpDLL}

  INTERNET_SCHEME_HTTP = 1; {$EXTERNALSYM INTERNET_SCHEME_HTTP}
  INTERNET_SCHEME_HTTPS = 2;  {$EXTERNALSYM INTERNET_SCHEME_HTTPS}

  (*Retrieves the static proxy or direct configuration from the registry.
    WINHTTP_ACCESS_TYPE_DEFAULT_PROXY does not inherit browser proxy settings.
    WinHTTP does not share any proxy settings with Internet Explorer.
    The WinHTTP proxy configuration is set by one of these mechanisms.
    The proxycfg.exe utility on Windows XP and Windows Server 2003 or earlier.
    The netsh.exe utility on Windows Vista and Windows Server 2008 or later.
    WinHttpSetDefaultProxyConfiguration on all platforms.*)
  WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = 0; {$EXTERNALSYM WINHTTP_ACCESS_TYPE_DEFAULT_PROXY}

  //Resolves all host names directly without a proxy.
  WINHTTP_ACCESS_TYPE_NO_PROXY = 1; {$EXTERNALSYM WINHTTP_ACCESS_TYPE_NO_PROXY}

  (*Passes requests to the proxy unless a proxy bypass list is supplied and
    the name to be resolved bypasses the proxy. In this case, this function
    uses WINHTTP_ACCESS_TYPE_NAMED_PROXY.*)
  WINHTTP_ACCESS_TYPE_NAMED_PROXY = 3; {$EXTERNALSYM WINHTTP_ACCESS_TYPE_NAMED_PROXY}

  WINHTTP_NO_PROXY_NAME = nil;  {$EXTERNALSYM WINHTTP_NO_PROXY_NAME}
  WINHTTP_NO_PROXY_BYPASS = nil; {$EXTERNALSYM WINHTTP_NO_PROXY_BYPASS}

  WINHTTP_FLAG_ASYNC = $10000000; {$EXTERNALSYM WINHTTP_FLAG_ASYNC}

  HTTP_STATUS_CONTINUE = 100; {$EXTERNALSYM HTTP_STATUS_CONTINUE} // OK to continue with request
  HTTP_STATUS_SWITCH_PROTOCOLS = 101; {$EXTERNALSYM HTTP_STATUS_SWITCH_PROTOCOLS} // server has switched protocols in upgrade header

  HTTP_STATUS_OK = 200; {$EXTERNALSYM HTTP_STATUS_OK} // request completed
  HTTP_STATUS_CREATED = 201; {$EXTERNALSYM HTTP_STATUS_CREATED} // object created, reason = new URI
  HTTP_STATUS_ACCEPTED = 202; {$EXTERNALSYM HTTP_STATUS_ACCEPTED}  // async completion (TBS)
  HTTP_STATUS_PARTIAL = 203; {$EXTERNALSYM HTTP_STATUS_PARTIAL} // partial completion
  HTTP_STATUS_NO_CONTENT = 204; {$EXTERNALSYM HTTP_STATUS_NO_CONTENT} // no info to return
  HTTP_STATUS_RESET_CONTENT = 205; {$EXTERNALSYM HTTP_STATUS_RESET_CONTENT} // request completed, but clear form
  HTTP_STATUS_PARTIAL_CONTENT = 206; {$EXTERNALSYM HTTP_STATUS_PARTIAL_CONTENT} // partial GET fulfilled
  HTTP_STATUS_WEBDAV_MULTI_STATUS = 207; {$EXTERNALSYM HTTP_STATUS_WEBDAV_MULTI_STATUS} // WebDAV Multi-Status

  HTTP_STATUS_AMBIGUOUS = 300; {$EXTERNALSYM HTTP_STATUS_AMBIGUOUS} // server couldn't decide what to return
  HTTP_STATUS_MOVED = 301; {$EXTERNALSYM HTTP_STATUS_MOVED} // object permanently moved
  HTTP_STATUS_REDIRECT = 302; {$EXTERNALSYM HTTP_STATUS_REDIRECT} // object temporarily moved
  HTTP_STATUS_REDIRECT_METHOD = 303; {$EXTERNALSYM HTTP_STATUS_REDIRECT_METHOD} // redirection w/ new access method
  HTTP_STATUS_NOT_MODIFIED = 304; {$EXTERNALSYM HTTP_STATUS_NOT_MODIFIED} // if-modified-since was not modified
  HTTP_STATUS_USE_PROXY = 305; {$EXTERNALSYM HTTP_STATUS_USE_PROXY} // redirection to proxy, location header specifies proxy to use
  HTTP_STATUS_REDIRECT_KEEP_VERB = 307; {$EXTERNALSYM HTTP_STATUS_REDIRECT_KEEP_VERB} // HTTP/1.1: keep same verb

  HTTP_STATUS_BAD_REQUEST = 400; {$EXTERNALSYM HTTP_STATUS_BAD_REQUEST} // invalid syntax
  HTTP_STATUS_DENIED = 401; {$EXTERNALSYM HTTP_STATUS_DENIED} // access denied
  HTTP_STATUS_PAYMENT_REQ = 402; {$EXTERNALSYM HTTP_STATUS_PAYMENT_REQ} // payment required
  HTTP_STATUS_FORBIDDEN = 403; {$EXTERNALSYM HTTP_STATUS_FORBIDDEN} // request forbidden
  HTTP_STATUS_NOT_FOUND = 404; {$EXTERNALSYM HTTP_STATUS_NOT_FOUND} // object not found
  HTTP_STATUS_BAD_METHOD = 405; {$EXTERNALSYM HTTP_STATUS_BAD_METHOD} // method is not allowed
  HTTP_STATUS_NONE_ACCEPTABLE = 406; {$EXTERNALSYM HTTP_STATUS_NONE_ACCEPTABLE} // no response acceptable to client found
  HTTP_STATUS_PROXY_AUTH_REQ = 407; {$EXTERNALSYM HTTP_STATUS_PROXY_AUTH_REQ} // proxy authentication required
  HTTP_STATUS_REQUEST_TIMEOUT = 408; {$EXTERNALSYM HTTP_STATUS_REQUEST_TIMEOUT} // server timed out waiting for request
  HTTP_STATUS_CONFLICT = 409; {$EXTERNALSYM HTTP_STATUS_CONFLICT} // user should resubmit with more info
  HTTP_STATUS_GONE = 410; {$EXTERNALSYM HTTP_STATUS_GONE} // the resource is no longer available
  HTTP_STATUS_LENGTH_REQUIRED = 411; {$EXTERNALSYM HTTP_STATUS_LENGTH_REQUIRED} // the server refused to accept request w/o a length
  HTTP_STATUS_PRECOND_FAILED = 412; {$EXTERNALSYM HTTP_STATUS_PRECOND_FAILED} // precondition given in request failed
  HTTP_STATUS_REQUEST_TOO_LARGE = 413; {$EXTERNALSYM HTTP_STATUS_REQUEST_TOO_LARGE} // request entity was too large
  HTTP_STATUS_URI_TOO_LONG = 414; {$EXTERNALSYM HTTP_STATUS_URI_TOO_LONG} // request URI too long
  HTTP_STATUS_UNSUPPORTED_MEDIA = 415; {$EXTERNALSYM HTTP_STATUS_UNSUPPORTED_MEDIA} // unsupported media type
  HTTP_STATUS_RETRY_WITH = 449; {$EXTERNALSYM HTTP_STATUS_RETRY_WITH} // retry after doing the appropriate action.

  HTTP_STATUS_SERVER_ERROR = 500; {$EXTERNALSYM HTTP_STATUS_SERVER_ERROR} // internal server error
  HTTP_STATUS_NOT_SUPPORTED = 501; {$EXTERNALSYM HTTP_STATUS_NOT_SUPPORTED} // required not supported
  HTTP_STATUS_BAD_GATEWAY = 502; {$EXTERNALSYM HTTP_STATUS_BAD_GATEWAY} // error response received from gateway
  HTTP_STATUS_SERVICE_UNAVAIL = 503; {$EXTERNALSYM HTTP_STATUS_SERVICE_UNAVAIL} // temporarily overloaded
  HTTP_STATUS_GATEWAY_TIMEOUT = 504; {$EXTERNALSYM HTTP_STATUS_GATEWAY_TIMEOUT} // timed out waiting for gateway
  HTTP_STATUS_VERSION_NOT_SUP = 505; {$EXTERNALSYM HTTP_STATUS_VERSION_NOT_SUP} // HTTP version not supported

  HTTP_STATUS_FIRST = HTTP_STATUS_CONTINUE; {$EXTERNALSYM HTTP_STATUS_FIRST}
  HTTP_STATUS_LAST = HTTP_STATUS_VERSION_NOT_SUP; {$EXTERNALSYM HTTP_STATUS_LAST}

  WINHTTP_ERROR_BASE = 12000;   {$EXTERNALSYM WINHTTP_ERROR_BASE}

  ERROR_WINHTTP_OUT_OF_HANDLES = (WINHTTP_ERROR_BASE + 1); {$EXTERNALSYM ERROR_WINHTTP_OUT_OF_HANDLES}
  ERROR_WINHTTP_TIMEOUT = (WINHTTP_ERROR_BASE + 2); {$EXTERNALSYM ERROR_WINHTTP_TIMEOUT}
  ERROR_WINHTTP_INTERNAL_ERROR = (WINHTTP_ERROR_BASE + 4); {$EXTERNALSYM ERROR_WINHTTP_INTERNAL_ERROR}
  ERROR_WINHTTP_INVALID_URL = (WINHTTP_ERROR_BASE + 5);  {$EXTERNALSYM ERROR_WINHTTP_INVALID_URL}
  ERROR_WINHTTP_UNRECOGNIZED_SCHEME = (WINHTTP_ERROR_BASE + 6); {$EXTERNALSYM ERROR_WINHTTP_UNRECOGNIZED_SCHEME}
  ERROR_WINHTTP_NAME_NOT_RESOLVED = (WINHTTP_ERROR_BASE + 7); {$EXTERNALSYM ERROR_WINHTTP_NAME_NOT_RESOLVED}
  ERROR_WINHTTP_INVALID_OPTION = (WINHTTP_ERROR_BASE + 9); {$EXTERNALSYM ERROR_WINHTTP_INVALID_OPTION}
  ERROR_WINHTTP_OPTION_NOT_SETTABLE = (WINHTTP_ERROR_BASE + 11); {$EXTERNALSYM ERROR_WINHTTP_OPTION_NOT_SETTABLE}
  ERROR_WINHTTP_SHUTDOWN = (WINHTTP_ERROR_BASE + 12); {$EXTERNALSYM ERROR_WINHTTP_SHUTDOWN}


  ERROR_WINHTTP_LOGIN_FAILURE = (WINHTTP_ERROR_BASE + 15); {$EXTERNALSYM ERROR_WINHTTP_LOGIN_FAILURE}
  ERROR_WINHTTP_OPERATION_CANCELLED = (WINHTTP_ERROR_BASE + 17); {$EXTERNALSYM ERROR_WINHTTP_OPERATION_CANCELLED}
  ERROR_WINHTTP_INCORRECT_HANDLE_TYPE = (WINHTTP_ERROR_BASE + 18); {$EXTERNALSYM ERROR_WINHTTP_INCORRECT_HANDLE_TYPE}
  ERROR_WINHTTP_INCORRECT_HANDLE_STATE = (WINHTTP_ERROR_BASE + 19); {$EXTERNALSYM ERROR_WINHTTP_INCORRECT_HANDLE_STATE}
  ERROR_WINHTTP_CANNOT_CONNECT = (WINHTTP_ERROR_BASE + 29); {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CONNECT}
  ERROR_WINHTTP_CONNECTION_ERROR = (WINHTTP_ERROR_BASE + 30); {$EXTERNALSYM ERROR_WINHTTP_CONNECTION_ERROR}
  ERROR_WINHTTP_RESEND_REQUEST = (WINHTTP_ERROR_BASE + 32); {$EXTERNALSYM ERROR_WINHTTP_RESEND_REQUEST}

  ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED = (WINHTTP_ERROR_BASE + 44); {$EXTERNALSYM ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED}

  //WinHttpRequest Component errors
  ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN = (WINHTTP_ERROR_BASE + 100); {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN}
  ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND = (WINHTTP_ERROR_BASE + 101); {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND}
  ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND = (WINHTTP_ERROR_BASE + 102); {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND}
  ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN = (WINHTTP_ERROR_BASE + 103); {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN}

  //HTTP API errors
  ERROR_WINHTTP_HEADER_NOT_FOUND = (WINHTTP_ERROR_BASE + 150);  {$EXTERNALSYM ERROR_WINHTTP_HEADER_NOT_FOUND}
  ERROR_WINHTTP_INVALID_SERVER_RESPONSE = (WINHTTP_ERROR_BASE + 152); {$EXTERNALSYM ERROR_WINHTTP_INVALID_SERVER_RESPONSE}
  ERROR_WINHTTP_INVALID_QUERY_REQUEST = (WINHTTP_ERROR_BASE + 154); {$EXTERNALSYM ERROR_WINHTTP_INVALID_QUERY_REQUEST}
  ERROR_WINHTTP_HEADER_ALREADY_EXISTS = (WINHTTP_ERROR_BASE + 155); {$EXTERNALSYM ERROR_WINHTTP_HEADER_ALREADY_EXISTS}
  ERROR_WINHTTP_REDIRECT_FAILED = (WINHTTP_ERROR_BASE + 156); {$EXTERNALSYM ERROR_WINHTTP_REDIRECT_FAILED}



  //additional WinHttp API error codes
  ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR = (WINHTTP_ERROR_BASE + 178);  {$EXTERNALSYM ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR}
  ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT = (WINHTTP_ERROR_BASE + 166); {$EXTERNALSYM ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT}
  ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT = (WINHTTP_ERROR_BASE + 167); {$EXTERNALSYM ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT}

  ERROR_WINHTTP_NOT_INITIALIZED = (WINHTTP_ERROR_BASE + 172); {$EXTERNALSYM ERROR_WINHTTP_NOT_INITIALIZED}
  ERROR_WINHTTP_SECURE_FAILURE = (WINHTTP_ERROR_BASE + 175);  {$EXTERNALSYM ERROR_WINHTTP_SECURE_FAILURE}

//
// Certificate security errors. These are raised only by the WinHttpRequest
// component. The WinHTTP Win32 API will return ERROR_WINHTTP_SECURE_FAILE and
// provide additional information via the WINHTTP_CALLBACK_STATUS_SECURE_FAILURE
// callback notification.
//
  ERROR_WINHTTP_SECURE_CERT_DATE_INVALID = (WINHTTP_ERROR_BASE + 37); {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_DATE_INVALID}
  ERROR_WINHTTP_SECURE_CERT_CN_INVALID = (WINHTTP_ERROR_BASE + 38);  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_CN_INVALID}
  ERROR_WINHTTP_SECURE_INVALID_CA = (WINHTTP_ERROR_BASE + 45); {$EXTERNALSYM ERROR_WINHTTP_SECURE_INVALID_CA}
  ERROR_WINHTTP_SECURE_CERT_REV_FAILED = (WINHTTP_ERROR_BASE + 57); {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_REV_FAILED}
  ERROR_WINHTTP_SECURE_CHANNEL_ERROR = (WINHTTP_ERROR_BASE + 157); {$EXTERNALSYM ERROR_WINHTTP_SECURE_CHANNEL_ERROR}
  ERROR_WINHTTP_SECURE_INVALID_CERT = (WINHTTP_ERROR_BASE + 169); {$EXTERNALSYM ERROR_WINHTTP_SECURE_INVALID_CERT}
  ERROR_WINHTTP_SECURE_CERT_REVOKED = (WINHTTP_ERROR_BASE + 170); {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_REVOKED}
  ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE = (WINHTTP_ERROR_BASE + 179); {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE}


  ERROR_WINHTTP_AUTODETECTION_FAILED = (WINHTTP_ERROR_BASE + 180); {$EXTERNALSYM ERROR_WINHTTP_AUTODETECTION_FAILED}
  ERROR_WINHTTP_HEADER_COUNT_EXCEEDED = (WINHTTP_ERROR_BASE + 181); {$EXTERNALSYM ERROR_WINHTTP_HEADER_COUNT_EXCEEDED}
  ERROR_WINHTTP_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 182); {$EXTERNALSYM ERROR_WINHTTP_HEADER_SIZE_OVERFLOW}
  ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 183); {$EXTERNALSYM ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW}
  ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW = (WINHTTP_ERROR_BASE + 184); {$EXTERNALSYM ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW}

  WINHTTP_ERROR_LAST = (WINHTTP_ERROR_BASE + 184); {$EXTERNALSYM WINHTTP_ERROR_LAST}

  //This flag provides the same behavior as WINHTTP_FLAG_REFRESH.
  WINHTTP_FLAG_BYPASS_PROXY_CACHE = $00000100; {$EXTERNALSYM WINHTTP_FLAG_BYPASS_PROXY_CACHE}

  (*Unsafe characters in the URL passed in for pwszObjectName
  are not converted to escape sequences.*)
  WINHTTP_FLAG_ESCAPE_DISABLE = $00000040; {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_DISABLE}

  (*Unsafe characters in the query component of the URL passed in for
  pwszObjectName are not converted to escape sequences.*)
  WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = $00000080; {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_DISABLE_QUERY}

  (*The string passed in for pwszObjectName is converted from an LPCWSTR
  to an LPSTR. All unsafe characters are converted to an escape sequence
  including the percent symbol. By default, all unsafe characters except
  the percent symbol are converted to an escape sequence.*)
  WINHTTP_FLAG_ESCAPE_PERCENT = $00000004; {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_PERCENT}

  (*The string passed in for pwszObjectName is assumed to consist of valid
  ANSI characters represented by WCHAR. No check are done for unsafe characters.
  Windows 7:  This option is obsolete.*)
  WINHTTP_FLAG_NULL_CODEPAGE = $00000008; {$EXTERNALSYM WINHTTP_FLAG_NULL_CODEPAGE}

  (*Indicates that the request should be forwarded to the originating server
  rather than sending a cached version of a resource from a proxy server.
  When this flag is used, a "Pragma: no-cache" header is added to the
  request handle. When creating an HTTP/1.1 request header,
  a "Cache-Control: no-cache" is also added.*)
  WINHTTP_FLAG_REFRESH = WINHTTP_FLAG_BYPASS_PROXY_CACHE; {$EXTERNALSYM WINHTTP_FLAG_REFRESH}


  WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 = $00000008; {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_SSL2}
  WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 = $00000020;  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_SSL3}
  WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 = $00000080; {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_TLS1}
  WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 = $00000200; {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1}
  WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 = $00000800;  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2}

  WINHTTP_FLAG_SECURE_PROTOCOL_ALL = WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 or WINHTTP_FLAG_SECURE_PROTOCOL_SSL3
    or WINHTTP_FLAG_SECURE_PROTOCOL_TLS1; {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_ALL}

  (*Uses secure transaction semantics. This translates to using
  Secure Sockets Layer (SSL)/Transport Layer Security (TLS).*)
  WINHTTP_FLAG_SECURE = $00800000; {$EXTERNALSYM WINHTTP_FLAG_SECURE}

  SECURITY_FLAG_IGNORE_UNKNOWN_CA = $00000100; {$EXTERNALSYM SECURITY_FLAG_IGNORE_UNKNOWN_CA}
  SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = $00002000; {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_DATE_INVALID} // expired X509 Cert.
  SECURITY_FLAG_IGNORE_CERT_CN_INVALID = $00001000; {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_CN_INVALID} // bad common name in X509 Cert.
  SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE = $00000200; {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE}

  // query only
  SECURITY_FLAG_SECURE = $00000001; {$EXTERNALSYM SECURITY_FLAG_SECURE}// can query only
  SECURITY_FLAG_STRENGTH_WEAK = $10000000; {$EXTERNALSYM SECURITY_FLAG_STRENGTH_WEAK}
  SECURITY_FLAG_STRENGTH_MEDIUM = $40000000; {$EXTERNALSYM SECURITY_FLAG_STRENGTH_MEDIUM}
  SECURITY_FLAG_STRENGTH_STRONG = $20000000; {$EXTERNALSYM SECURITY_FLAG_STRENGTH_STRONG}


  WINHTTP_QUERY_MIME_VERSION = 0; {$EXTERNALSYM WINHTTP_QUERY_MIME_VERSION}
  WINHTTP_QUERY_CONTENT_TYPE = 1;  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_TYPE}
  WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2; {$EXTERNALSYM WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING}
  WINHTTP_QUERY_CONTENT_ID = 3; {$EXTERNALSYM WINHTTP_QUERY_CONTENT_ID}
  WINHTTP_QUERY_CONTENT_DESCRIPTION = 4; {$EXTERNALSYM WINHTTP_QUERY_CONTENT_DESCRIPTION}
  WINHTTP_QUERY_CONTENT_LENGTH = 5; {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LENGTH}
  WINHTTP_QUERY_CONTENT_LANGUAGE = 6; {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LANGUAGE}
  WINHTTP_QUERY_ALLOW = 7; {$EXTERNALSYM WINHTTP_QUERY_ALLOW}
  WINHTTP_QUERY_PUBLIC = 8; {$EXTERNALSYM WINHTTP_QUERY_PUBLIC}
  WINHTTP_QUERY_DATE = 9; {$EXTERNALSYM WINHTTP_QUERY_DATE}
  WINHTTP_QUERY_EXPIRES = 10; {$EXTERNALSYM WINHTTP_QUERY_EXPIRES}
  WINHTTP_QUERY_LAST_MODIFIED = 11; {$EXTERNALSYM WINHTTP_QUERY_LAST_MODIFIED}
  WINHTTP_QUERY_MESSAGE_ID = 12;  {$EXTERNALSYM WINHTTP_QUERY_MESSAGE_ID}
  WINHTTP_QUERY_URI = 13; {$EXTERNALSYM WINHTTP_QUERY_URI}
  WINHTTP_QUERY_DERIVED_FROM = 14; {$EXTERNALSYM WINHTTP_QUERY_DERIVED_FROM}
  WINHTTP_QUERY_COST = 15; {$EXTERNALSYM WINHTTP_QUERY_COST}
  WINHTTP_QUERY_LINK = 16; {$EXTERNALSYM WINHTTP_QUERY_LINK}
  WINHTTP_QUERY_PRAGMA = 17; {$EXTERNALSYM WINHTTP_QUERY_PRAGMA}
  WINHTTP_QUERY_VERSION = 18; {$EXTERNALSYM WINHTTP_QUERY_VERSION} // special: part of status line
  WINHTTP_QUERY_STATUS_CODE = 19; {$EXTERNALSYM WINHTTP_QUERY_STATUS_CODE} // special: part of status line
  WINHTTP_QUERY_STATUS_TEXT = 20; {$EXTERNALSYM WINHTTP_QUERY_STATUS_TEXT} // special: part of status line
  WINHTTP_QUERY_RAW_HEADERS = 21; {$EXTERNALSYM WINHTTP_QUERY_RAW_HEADERS} // special: all headers as ASCIIZ
  WINHTTP_QUERY_RAW_HEADERS_CRLF = 22; {$EXTERNALSYM WINHTTP_QUERY_RAW_HEADERS_CRLF} // special: all headers
  WINHTTP_QUERY_CONNECTION = 23; {$EXTERNALSYM WINHTTP_QUERY_CONNECTION}
  WINHTTP_QUERY_ACCEPT = 24;  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT}
  WINHTTP_QUERY_ACCEPT_CHARSET = 25; {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_CHARSET}
  WINHTTP_QUERY_ACCEPT_ENCODING = 26; {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_ENCODING}
  WINHTTP_QUERY_ACCEPT_LANGUAGE = 27; {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_LANGUAGE}
  WINHTTP_QUERY_AUTHORIZATION = 28; {$EXTERNALSYM WINHTTP_QUERY_AUTHORIZATION}
  WINHTTP_QUERY_CONTENT_ENCODING = 29; {$EXTERNALSYM WINHTTP_QUERY_CONTENT_ENCODING}
  WINHTTP_QUERY_FORWARDED = 30; {$EXTERNALSYM WINHTTP_QUERY_FORWARDED}
  WINHTTP_QUERY_FROM = 31; {$EXTERNALSYM WINHTTP_QUERY_FROM}
  WINHTTP_QUERY_IF_MODIFIED_SINCE = 32; {$EXTERNALSYM WINHTTP_QUERY_IF_MODIFIED_SINCE}
  WINHTTP_QUERY_LOCATION = 33; {$EXTERNALSYM WINHTTP_QUERY_LOCATION}
  WINHTTP_QUERY_ORIG_URI = 34; {$EXTERNALSYM WINHTTP_QUERY_ORIG_URI}
  WINHTTP_QUERY_REFERER = 35; {$EXTERNALSYM WINHTTP_QUERY_REFERER}
  WINHTTP_QUERY_RETRY_AFTER = 36; {$EXTERNALSYM WINHTTP_QUERY_RETRY_AFTER}
  WINHTTP_QUERY_SERVER = 37; {$EXTERNALSYM WINHTTP_QUERY_SERVER}
  WINHTTP_QUERY_TITLE = 38; {$EXTERNALSYM WINHTTP_QUERY_TITLE}
  WINHTTP_QUERY_USER_AGENT = 39; {$EXTERNALSYM WINHTTP_QUERY_USER_AGENT}
  WINHTTP_QUERY_WWW_AUTHENTICATE = 40; {$EXTERNALSYM WINHTTP_QUERY_WWW_AUTHENTICATE}
  WINHTTP_QUERY_PROXY_AUTHENTICATE = 41; {$EXTERNALSYM WINHTTP_QUERY_PROXY_AUTHENTICATE}
  WINHTTP_QUERY_ACCEPT_RANGES = 42; {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_RANGES}
  WINHTTP_QUERY_SET_COOKIE = 43; {$EXTERNALSYM WINHTTP_QUERY_SET_COOKIE}
  WINHTTP_QUERY_COOKIE = 44; {$EXTERNALSYM WINHTTP_QUERY_COOKIE}
  WINHTTP_QUERY_REQUEST_METHOD = 45; {$EXTERNALSYM WINHTTP_QUERY_REQUEST_METHOD} // special: GET/POST etc.
  WINHTTP_QUERY_REFRESH = 46; {$EXTERNALSYM WINHTTP_QUERY_REFRESH}
  WINHTTP_QUERY_CONTENT_DISPOSITION = 47; {$EXTERNALSYM WINHTTP_QUERY_CONTENT_DISPOSITION}

  // HTTP 1.1 defined headers
  WINHTTP_QUERY_AGE = 48;
  WINHTTP_QUERY_CACHE_CONTROL = 49;
  WINHTTP_QUERY_CONTENT_BASE = 50;
  WINHTTP_QUERY_CONTENT_LOCATION = 51;
  WINHTTP_QUERY_CONTENT_MD = 5 = 52;
  WINHTTP_QUERY_CONTENT_RANGE = 53;
  WINHTTP_QUERY_ETAG = 54;
  WINHTTP_QUERY_HOST = 55;
  WINHTTP_QUERY_IF_MATCH = 56;
  WINHTTP_QUERY_IF_NONE_MATCH = 57;
  WINHTTP_QUERY_IF_RANGE = 58;
  WINHTTP_QUERY_IF_UNMODIFIED_SINCE = 59;
  WINHTTP_QUERY_MAX_FORWARDS = 60;
  WINHTTP_QUERY_PROXY_AUTHORIZATION = 61;
  WINHTTP_QUERY_RANGE = 62;
  WINHTTP_QUERY_TRANSFER_ENCODING = 63;
  WINHTTP_QUERY_UPGRADE = 64;
  WINHTTP_QUERY_VARY = 65;
  WINHTTP_QUERY_VIA = 66;
  WINHTTP_QUERY_WARNING = 67;
  WINHTTP_QUERY_EXPECT = 68;
  WINHTTP_QUERY_PROXY_CONNECTION = 69;
  WINHTTP_QUERY_UNLESS_MODIFIED_SINCE = 70;



  WINHTTP_QUERY_PROXY_SUPPORT = 75;
  WINHTTP_QUERY_AUTHENTICATION_INFO = 76;
  WINHTTP_QUERY_PASSPORT_URLS = 77;
  WINHTTP_QUERY_PASSPORT_CONFIG = 78;

  WINHTTP_QUERY_MAX = 78;


  (*WINHTTP_QUERY_CUSTOM - if this special value is supplied as the dwInfoLevel
  parameter of WinHttpQueryHeaders() then the lpBuffer parameter contains the name
  of the header we are to query*)
  WINHTTP_QUERY_CUSTOM = 65535;

  (*WINHTTP_QUERY_FLAG_REQUEST_HEADERS - if this bit is set in the dwInfoLevel
  parameter of WinHttpQueryHeaders() then the request headers will be queried for the
  request information*)
  WINHTTP_QUERY_FLAG_REQUEST_HEADERS = $80000000;

  (*WINHTTP_QUERY_FLAG_SYSTEMTIME - if this bit is set in the dwInfoLevel parameter
  of WinHttpQueryHeaders() AND the header being queried contains date information,
  e.g. the "Expires:" header then lpBuffer will contain a SYSTEMTIME structure
  containing the date and time information converted from the header string*)
  WINHTTP_QUERY_FLAG_SYSTEMTIME = $40000000;

  (*WINHTTP_QUERY_FLAG_NUMBER - if this bit is set in the dwInfoLevel parameter of
  HttpQueryHeader(), then the value of the header will be converted to a number
  before being returned to the caller, if applicable*)
  WINHTTP_QUERY_FLAG_NUMBER = $20000000;

  //WinHttpQueryHeaders prettifiers for optional parameters.
  WINHTTP_HEADER_NAME_BY_INDEX = nil;
  WINHTTP_NO_OUTPUT_BUFFER = nil;
  WINHTTP_NO_HEADER_INDEX = nil;

  WINHTTP_OPTION_CALLBACK = 1;
  WINHTTP_OPTION_RESOLVE_TIMEOUT = 2;
  WINHTTP_OPTION_CONNECT_TIMEOUT = 3;
  WINHTTP_OPTION_CONNECT_RETRIES = 4;
  WINHTTP_OPTION_SENDING_TIMEOUT = 5;
  WINHTTP_OPTION_RECEIVE_TIMEOUT = 6;
  WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT = 7;
  WINHTTP_OPTION_HANDLE_TYPE = 9;
  WINHTTP_OPTION_READ_BUFFER_SIZE = 12;
  WINHTTP_OPTION_WRITE_BUFFER_SIZE = 13;
  WINHTTP_OPTION_PARENT_HANDLE = 21;
  WINHTTP_OPTION_EXTENDED_ERROR = 24;
  WINHTTP_OPTION_SECURITY_FLAGS = 31;
  WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT = 32;
  WINHTTP_OPTION_URL = 34;
  WINHTTP_OPTION_SECURITY_KEY_BITNESS = 36;
  WINHTTP_OPTION_PROXY = 38;

  WINHTTP_OPTION_USER_AGENT = 41;
  WINHTTP_OPTION_CONTEXT_VALUE = 45;
  WINHTTP_OPTION_CLIENT_CERT_CONTEXT = 47;
  WINHTTP_OPTION_REQUEST_PRIORITY = 58;
  WINHTTP_OPTION_HTTP_VERSION = 59;
  WINHTTP_OPTION_DISABLE_FEATURE = 63;

  WINHTTP_OPTION_CODEPAGE = 68;
  WINHTTP_OPTION_MAX_CONNS_PER_SERVER = 73;
  WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER = 74;
  WINHTTP_OPTION_AUTOLOGON_POLICY = 77;
  WINHTTP_OPTION_SERVER_CERT_CONTEXT = 78;
  WINHTTP_OPTION_ENABLE_FEATURE = 79;
  WINHTTP_OPTION_WORKER_THREAD_COUNT = 80;
  WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT = 81;
  WINHTTP_OPTION_PASSPORT_COBRANDING_URL = 82;
  WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH = 83;
  WINHTTP_OPTION_SECURE_PROTOCOLS = 84;
  WINHTTP_OPTION_ENABLETRACING = 85;
  WINHTTP_OPTION_PASSPORT_SIGN_OUT = 86;
  WINHTTP_OPTION_PASSPORT_RETURN_URL = 87;
  WINHTTP_OPTION_REDIRECT_POLICY = 88;
  WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS = 89;
  WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE = 90;
  WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE = 91;
  WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE = 92;

  WINHTTP_FIRST_OPTION = WINHTTP_OPTION_CALLBACK;
  WINHTTP_LAST_OPTION = WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE;

  WINHTTP_OPTION_USERNAME = $1000;
  WINHTTP_OPTION_PASSWORD = $1001;
  WINHTTP_OPTION_PROXY_USERNAME = $1002;
  WINHTTP_OPTION_PROXY_PASSWORD = $1003;


// manifest value for WINHTTP_OPTION_MAX_CONNS_PER_SERVER and WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER
  WINHTTP_CONNS_PER_SERVER_UNLIMITED = $FFFFFFFF;


// values for WINHTTP_OPTION_AUTOLOGON_POLICY
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM = 0;
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW = 1;
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH = 2;

  WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT = WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM;

// values for WINHTTP_OPTION_REDIRECT_POLICY
  WINHTTP_OPTION_REDIRECT_POLICY_NEVER = 0;
  WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = 1;
  WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS = 2;

  WINHTTP_OPTION_REDIRECT_POLICY_LAST = WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS;
  WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT = WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP;

  WINHTTP_DISABLE_PASSPORT_AUTH = $00000000;
  WINHTTP_ENABLE_PASSPORT_AUTH = $10000000;
  WINHTTP_DISABLE_PASSPORT_KEYRING = $20000000;
  WINHTTP_ENABLE_PASSPORT_KEYRING = $40000000;



  // values for WINHTTP_OPTION_DISABLE_FEATURE
  WINHTTP_DISABLE_COOKIES = $00000001;
  WINHTTP_DISABLE_REDIRECTS = $00000002;
  WINHTTP_DISABLE_AUTHENTICATION = $00000004;
  WINHTTP_DISABLE_KEEP_ALIVE = $00000008;

  // values for WINHTTP_OPTION_ENABLE_FEATURE
  WINHTTP_ENABLE_SSL_REVOCATION = $00000001;
  WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION = $00000002;

  WINHTTP_NO_REFERER = PWideChar(nil);
  WINHTTP_DEFAULT_ACCEPT_TYPES = PLPWSTR(nil);

  WINHTTP_NO_ADDITIONAL_HEADERS = PWideChar(nil);
  WINHTTP_NO_REQUEST_DATA = nil;

  //values for dwModifiers parameter of WinHttpAddRequestHeaders()
  WINHTTP_ADDREQ_INDEX_MASK = $0000FFFF;
  WINHTTP_ADDREQ_FLAGS_MASK = $FFFF0000;

  (*WINHTTP_ADDREQ_FLAG_ADD_IF_NEW - the header will only be added
  if it doesn't already exist*)
  WINHTTP_ADDREQ_FLAG_ADD_IF_NEW = $10000000;

  (*WINHTTP_ADDREQ_FLAG_ADD - if WINHTTP_ADDREQ_FLAG_REPLACE is set but the header is
  not found then if this flag is set, the header is added anyway, so long as
  there is a valid header-value*)
  WINHTTP_ADDREQ_FLAG_ADD = $20000000;

  (*WINHTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
  "Accept: text/*" and "Accept: audio/*" with this flag results in a single
  header: "Accept: text/*, audio/*"*)
  WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = $40000000;
  WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = $01000000;
  WINHTTP_ADDREQ_FLAG_COALESCE = WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA;


  (*WINHTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
  be supplied in the buffer. If the header to be replaced is not the first
  in a list of headers with the same name, then the relative index should be
  supplied in the low 8 bits of the dwModifiers parameter. If the header-value
  part is missing, then the header is removed*)
  WINHTTP_ADDREQ_FLAG_REPLACE = $80000000;

type
  HINTERNET = Pointer;
{$EXTERNALSYM HINTERNET}
  PHINTERNET = ^HINTERNET;
  LPHINTERNET = PHINTERNET;
{$EXTERNALSYM LPHINTERNET}

  INTERNET_PORT = Word;
{$EXTERNALSYM INTERNET_PORT}
  PINTERNET_PORT = ^INTERNET_PORT;
  LPINTERNET_PORT = PINTERNET_PORT;
{$EXTERNALSYM LPINTERNET_PORT}

  URL_COMPONENTS = packed record
    dwStructSize: DWORD;
    lpszScheme: PWideChar;
    dwSchemeLength: DWORD;
    nScheme: Integer;
    lpszHostName: PWideChar;
    dwHostNameLength: DWORD;
    nPort: INTERNET_PORT;
    align: Word;
    lpszUserName: PWideChar;
    dwUserNameLength: DWORD;
    lpszPassword: PWideChar;
    dwPasswordLength: DWORD;
    lpszUrlPath: PWideChar;
    dwUrlPathLength: DWORD;
    lpszExtraInfo: PWideChar;
    dwExtraInfoLength: DWORD;
  end;
  LPURL_COMPONENTS = ^URL_COMPONENTS;

  WINHTTP_PROXY_INFO = packed record
    dwAccessType: DWORD;
    lpszProxy: LPWSTR;
    lpszProxyBypass: LPWSTR;
  end;
  LPWINHTTP_PROXY_INFO = ^WINHTTP_PROXY_INFO;

{$EXTERNALSYM WinHttpOpen}
function WinHttpOpen(pwszUserAgent: PWideChar; dwAccessType: DWORD;
  pwszProxyName, pwszProxyBypass: PWideChar;
  dwFlags: DWORD): HINTERNET; stdcall;

{$EXTERNALSYM WinHttpConnect}
function WinHttpConnect(hSession: HINTERNET; pswzServerName: PWideChar;
  nServerPort: INTERNET_PORT; dwReserved: DWORD): HINTERNET; stdcall;

{$EXTERNALSYM WinHttpOpenRequest}
function WinHttpOpenRequest(hConnect: HINTERNET; pwszVerb: PWideChar;
  pwszObjectName: PWideChar; pwszVersion: PWideChar; pwszReferer: PWideChar;
  ppwszAcceptTypes: PLPWSTR; dwFlags: DWORD): HINTERNET; stdcall;

{$EXTERNALSYM WinHttpCloseHandle}
function WinHttpCloseHandle(HINTERNET: HINTERNET): BOOL; stdcall;

{$EXTERNALSYM WinHttpAddRequestHeaders}
function WinHttpAddRequestHeaders(hRequest: HINTERNET; pwszHeaders: PWideChar;
  dwHeadersLength: DWORD; dwModifiers: DWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpSendRequest}
function WinHttpSendRequest(hRequest: HINTERNET; pwszHeaders: PWideChar;
  dwHeadersLength: DWORD; lpOptional: Pointer; dwOptionalLength: DWORD;
  dwTotalLength: DWORD; dwContext: DWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpReceiveResponse}
function WinHttpReceiveResponse(hRequest: HINTERNET;
  lpReserved: Pointer): BOOL; stdcall;

{$EXTERNALSYM WinHttpQueryHeaders}
function WinHttpQueryHeaders(hRequest: HINTERNET; dwInfoLevel: DWORD;
  pwszName: PWideChar; lpBuffer: Pointer; var lpdwBufferLength: DWORD;
  lpdwIndex: PDWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpQueryOption}
function WinHttpQueryOption(hInternet: HINTERNET; dwOption: DWORD;
  lpBuffer: Pointer; lpdwBufferLength: LPDWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpReadData}
function WinHttpReadData(hRequest: HINTERNET; lpBuffer: Pointer;
  BytesToRead: DWORD; BytesRead: LPDWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpWriteData}
function WinHttpWriteData(hRequest: HINTERNET;
  lpBuffer: Pointer; dwNumberOfBytesToWrite: DWORD;
  pdwNumberOfBytesWritten: PDWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpSetOption}
function WinHttpSetOption(HINTERNET: HINTERNET; dwOption: DWORD;
  lpBuffer: Pointer; dwBufferLength: DWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpCheckPlatform}
function WinHttpCheckPlatform(): BOOL; stdcall;

{$EXTERNALSYM WinHttpSetTimeouts}
function WinHttpSetTimeouts(HINTERNET: HINTERNET;
  dwresolving_timeout, dwconnecting_timeout: DWORD;
  dwsending_timeout, dwReceiveTimeout: DWORD): BOOL; stdcall;

{$EXTERNALSYM WinHttpDetectAutoProxyConfigUrl}
function WinHttpDetectAutoProxyConfigUrl(
  dwAutoDetectFlags: DWORD;
  ppwszAutoConfigUrl: PPWideChar): BOOL; stdcall;

{$EXTERNALSYM WinHttpTimeFromSystemTime}
function WinHttpTimeFromSystemTime(const pst: SYSTEMTIME;
  pwszTime: PWideChar): BOOL; stdcall;

{$EXTERNALSYM WinHttpTimeToSystemTime}
function WinHttpTimeToSystemTime(pwszTime: PWideChar;
  out pst: SYSTEMTIME): BOOL; stdcall;

{$EXTERNALSYM WinHttpCrackUrl}
function WinHttpCrackUrl(pwszUrl: PWideChar;
  dwUrlLength, dwFlags: DWORD;
  out lpUrlComponents: URL_COMPONENTS): BOOL; stdcall;

implementation

function WinHttpOpen; stdcall; external WinHttpDLL;

function WinHttpConnect; stdcall; external WinHttpDLL;

function WinHttpOpenRequest; stdcall; external WinHttpDLL;

function WinHttpCloseHandle; stdcall; external WinHttpDLL;

function WinHttpAddRequestHeaders; stdcall; external WinHttpDLL;

function WinHttpSendRequest; stdcall; external WinHttpDLL;

function WinHttpReceiveResponse; stdcall; external WinHttpDLL;

function WinHttpQueryHeaders; stdcall; external WinHttpDLL;

function WinHttpReadData; stdcall; external WinHttpDLL;

function WinHttpWriteData; stdcall; external WinHttpDLL;

function WinHttpSetOption; stdcall; external WinHttpDLL;

function WinHttpCheckPlatform; stdcall; external WinHttpDLL;

function WinHttpSetTimeouts; stdcall; external WinHttpDLL;

function WinHttpDetectAutoProxyConfigUrl; stdcall; external WinHttpDLL;

function WinHttpTimeFromSystemTime; stdcall; external WinHttpDLL;

function WinHttpTimeToSystemTime; stdcall; external WinHttpDLL;

function WinHttpCrackUrl; stdcall; external WinHttpDLL;

function WinHttpQueryOption; stdcall; external WinHttpDLL;

end.
